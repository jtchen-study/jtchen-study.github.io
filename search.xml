<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HiKaricp数据库连接池的使用</title>
    <url>/2020/11/18/HiKaricp%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近学习到除druid外，一种网上评论更快的数据库连接池，hikaricp,以下是SpringBoot集成HiKaricp</p>
<h2 id="1、首先在springboot项目中引入mybatis及mysql的相关依赖。"><a href="#1、首先在springboot项目中引入mybatis及mysql的相关依赖。" class="headerlink" title="1、首先在springboot项目中引入mybatis及mysql的相关依赖。"></a>1、首先在springboot项目中引入mybatis及mysql的相关依赖。</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、其次在application-yml中做相应的配置"><a href="#2、其次在application-yml中做相应的配置" class="headerlink" title="2、其次在application.yml中做相应的配置"></a>2、其次在application.yml中做相应的配置</h2><p>相应配置如下</p>
<pre class=" language-yml"><code class="language-yml">
#tomcat配置
server:
  port: 8088
  tomcat:
    uri-encoding: UTF-8
  max-http-header-size: 80KB


#连接池配置
spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/foodie-shop?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
    username: root
    password: root
    hikari:
      connection-timeout: 30000 #等待连接池分配连接的最大时常（毫秒），超过这个时常还没有可用的连接则会发生SQLException,默认：30秒
      minimum-idle: 5 #最小连接数
      maximum-pool-size: 20 #最大连接数
      auto-commit: true #自动提交
      idle-timeout: 600000 #连接超时的最大时长(毫秒)，超时则被释放(retired)
      pool-name: DataSourceHikariCP #连接池名字
      max-lifetime: 1800000 #连接的生命时长(毫秒)，超时而且没被使用则被释放
      connection-test-query: SELECT 1


#mybatis配置

mybatis:
  type-aliases-package: com.imooc.pojo #实体类的存放位置
  mapper-locations: classpath:mapper/*.xml #mappery映射文件</code></pre>
]]></content>
      <categories>
        <category>HiKaricp</category>
      </categories>
      <tags>
        <tag>HiKaricp</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SpringBoot进行单元测试</title>
    <url>/2020/11/19/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h2><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、编写相关测试用例"><a href="#2、编写相关测试用例" class="headerlink" title="2、编写相关测试用例"></a>2、编写相关测试用例</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c999a60091524928b871b5e42dea587d~tplv-k3u1fbpfcp-zoom-1.image" alt="avatar"></p>
<p>注意，单元测试需要添加如下注解:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//配置启动类</span>
</code></pre>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合log4j输出日志</title>
    <url>/2020/11/22/SpringBoot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="1、首先剔除springboot自带的logging日志，因为其内容包含的太多。"><a href="#1、首先剔除springboot自带的logging日志，因为其内容包含的太多。" class="headerlink" title="1、首先剔除springboot自带的logging日志，因为其内容包含的太多。"></a>1、首先剔除springboot自带的logging日志，因为其内容包含的太多。</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f1b4d49f0c450b887bbb2df050c88a~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span> // 剔除springboot自带的logging
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>剔除后再启动项目，可以发现控制台的输出，缺少日志，并且无端口号之类的信息.<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7c5054094be45218054a5784ff385fe~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="2、加入日志相关依赖"><a href="#2、加入日志相关依赖" class="headerlink" title="2、加入日志相关依赖"></a>2、加入日志相关依赖</h2><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 日志相关 抽象层及实现层 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>效果图:<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ea618ec6f0444e6a60d0ba9ac2914dc~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="3、编写相关配置文件log4j-properties"><a href="#3、编写相关配置文件log4j-properties" class="headerlink" title="3、编写相关配置文件log4j.properties"></a>3、编写相关配置文件log4j.properties</h2><pre class=" language-xml"><code class="language-xml">log4j.rootLogger=DEBUG,stdout,file
log4j.additivity.org.apache=true

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.threshold=INFO
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%-5p %c<span class="token entity" title="&#123;">&amp;#123;</span>1<span class="token entity" title="&#125;">&amp;#125;</span>:%L - %m%n

log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.DatePattern='.'yyyy-MM-dd-HH-mm
log4j.appender.file.layout.ConversionPattern=%d<span class="token entity" title="&#123;">&amp;#123;</span>yyyy-MM-dd HH:mm:ss<span class="token entity" title="&#125;">&amp;#125;</span> %-5p %c<span class="token entity" title="&#123;">&amp;#123;</span>1<span class="token entity" title="&#125;">&amp;#125;</span>::%L - %m%n
log4j.appender.file.Threshold=INFO
log4j.appender.file.append=true
log4j.appender.file.File=/workspaces/logs/foodie-api/mylog.log
</code></pre>
<p>效果图:</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c1835ece22498ab520fec2904671dd~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="4、项目中的使用"><a href="#4、项目中的使用" class="headerlink" title="4、项目中的使用"></a>4、项目中的使用</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/152078da697143ce85f031930ee32a5f~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<p>注意Logger是 org.slf4j包下的。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis逆向生成工具</title>
    <url>/2020/11/17/MyBatis%E9%80%86%E5%90%91%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>简介：MyBatis数据库逆向生成工具，包含Mybatis-generator以及MyMapper插件，通过这个工具可以生成pojo实体类，<em>mapper.xml以及</em>mapper.java三种文件。</p>
<h2 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c03fe2d70c2e46ca8ed2d0671b085c1d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="1、通用mapper接口"><a href="#1、通用mapper接口" class="headerlink" title="1、通用mapper接口"></a>1、通用mapper接口</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45342bb86d8d413e831c979add4c4ded~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p>配置模板如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MysqlContext<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span> <span class="token attr-name">defaultModelType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beginningDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>endingDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 通用mapper所在目录 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tk.mybatis.mapper.generator.MapperPlugin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.my.mapper.MyMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>
                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/foodie-shop-dev<span class="token punctuation">"</span></span>
                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>
                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 对应生成的pojo所在包 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 对应生成的mapper所在目录 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 配置mapper对应的java映射 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 数据库表 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="carousel">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="category">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_comments">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_img">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_param">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_spec">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="order_items">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="order_status">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="orders">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="user_address">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="users">&lt;/table>--></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3、生成执行类"><a href="#3、生成执行类" class="headerlink" title="3、生成执行类"></a>3、生成执行类</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a5c47e257674fb7bdc9509f6747d7b2~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖-同时需要将逆向生成工具中的通用mapper粘贴进来。"><a href="#4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖-同时需要将逆向生成工具中的通用mapper粘贴进来。" class="headerlink" title="4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖,同时需要将逆向生成工具中的通用mapper粘贴进来。"></a>4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖,<strong>同时需要将逆向生成工具中的通用mapper粘贴进来。</strong></h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>同时，项目的配置文件需要修改</p>
<pre class=" language-xml"><code class="language-xml">mapper:
  mappers: com.imooc.my.mapper.MyMapper #通用mapper的位置
  not-empty: false #在进行数据库操作的时候，判断表达式 是否为空
  #例如 username != null,是否追加 username != ''，尽量自己手写
  identity: MYSQL</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b9bf6d0d83e444fac1f25de2a4e23c5~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>需要注意的是在配置文件中指定了实体类和mapper.xml文件的存放位置，但是*mapper.java文件的位置没有指定，在启动类中通过@MapperScan指定了。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>maven构建聚合工程</title>
    <url>/2020/11/18/maven%E6%9E%84%E5%BB%BA%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Maven中的打包方式"><a href="#Maven中的打包方式" class="headerlink" title="Maven中的打包方式"></a>Maven中的打包方式</h2><p>maven中打包方式有三种，pom,war,jar，一般在父模块打包方式选pom,子模块再指定相应的war或者jar，其标签如下：</p>
<pre><code> &lt;packaging&gt;&lt;/packaging&gt;</code></pre>
<h2 id="SpringBoot构建聚合工程步骤"><a href="#SpringBoot构建聚合工程步骤" class="headerlink" title="SpringBoot构建聚合工程步骤"></a>SpringBoot构建聚合工程步骤</h2><h3 id="1、父工程构建"><a href="#1、父工程构建" class="headerlink" title="1、父工程构建"></a>1、父工程构建</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8290f8b0c42b4897886bcc1ff97534c6~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="2、子工程构建"><a href="#2、子工程构建" class="headerlink" title="2、子工程构建"></a>2、子工程构建</h3><p>1、在父模块点击new module<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/238211cbd250462baa4118b2708dbc63~tplv-k3u1fbpfcp-zoom-1.image"><br>2、next下一步即可<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/921d56a58eb9466b9e1a6b1ec1d30cdf~tplv-k3u1fbpfcp-zoom-1.image"><br>在这里可以看出子模块清晰地标出了丛属的parent模块<br>3、子模块的pom文件<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8847ea6138524b06b2c96fc2825ea9bd~tplv-k3u1fbpfcp-zoom-1.image"><br>注意到，其默认打包方式为jar，但是我们一般喜欢显示的声明出来。</p>
<p>4、此时可以查看父模块的pom文件，发现发生了变化，父模块的pom文件多了个</p>
<pre><code> &lt;modules&gt;  &lt;/modules&gt;</code></pre>
<p>标签，并且所有的子模块都在这个标签中出现。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75f15eea4b7142d6ab63b24519ded62e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>5、子工程之间可以相互依赖，如何做到这一点呢，其实很简单，比如我们再创建一个子模块叫foodie-dev-pojo，并且在他的pom文件里加入依赖，这样，两个子工程就做到相互依赖了。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a4c99e267b04b818793a8ddf24a8c35~tplv-k3u1fbpfcp-zoom-1.image"><br>6、接下来我们又创建了mapper模块，用以存放与mybatis交互的一些mapper.jar等，这里需要注意这个子模块要依赖pojo层，原因是一些sql语句需要实体类，因此需添加相关依赖。</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e306a999fea48b38f913d0d816c1259~tplv-k3u1fbpfcp-zoom-1.image"><br>子模块的依赖关系如下<br>mapper–&gt;pojo–&gt;common，因此mapper也可以使用common中的相应方法。</p>
<p>7、接下来是service层，同理这一部分需要依赖mapper层。</p>
<pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffc2e67b9d2840f58430e655dc6eb795~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>依赖关系如下：<br>service–&gt;mapper–&gt;pojo–&gt;common</p>
<p>8、最后一个子模块是api模块，也就是controller层<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25e87c918d054c7abf3a584ad2e44798~tplv-k3u1fbpfcp-zoom-1.image"><br>api层依赖了service，也可以调用mapper层，但是原则上不允许之间调mapepr层，只允许调用service层。</p>
<p>9、最后需要注意的是，我们构建完聚合工程后，一定要安装，所谓的安装就是在maven的root项目的lifecycle里双击install命令。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c444d793b2f4b989e55e11590e52c84~tplv-k3u1fbpfcp-zoom-1.image"><br>安装完成控制台会出现，build success提示。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fa4f10b9eed44c5b3c2d93979bae07f~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、聚合工程可以分为顶级项目(顶级工程、父工程)与子工程，这两者的关系其实就是父子继承的关系，子工程在maven里称之为模块(module)，模块之间是平级的，<strong>是可以相互依赖的。</strong><br>2、子模块可以使用顶级工程里的所有资源(依赖)，子模块之间如果要使用资源，必须构建依赖(构建关系)<br>3、一个顶级工程是可以由多个不同的子工程共同组合而成。这就构成了一个可以运行的项目。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>基于通用mapper和restful风格撰写api</title>
    <url>/2020/11/19/%E5%9F%BA%E4%BA%8E%E9%80%9A%E7%94%A8mapper%E5%92%8Crestful%E9%A3%8E%E6%A0%BC%E6%92%B0%E5%86%99api/</url>
    <content><![CDATA[<p>现数据库有一张名为Stu的表<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32558fc8b8ee4c269afd061c6fcc1060~tplv-k3u1fbpfcp-zoom-1.image"><br>基于上一个博客提到的mybatis逆向工程生成<em>mapper.java、</em>mapper.xml以及pojo实体类，编写案例StuService,以及相应的实现类StuServiceImpl，<strong>注意到的是StuServiceImpl上面需要打上@Service注解以便可以被扫描到。</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Stu<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StuService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Stu <span class="token function">getStuInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStu</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteStu</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b448e6f375a4f5684e908972a63dfaf~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c19e06c8e0148ac90ca898303a6d29e~tplv-k3u1fbpfcp-zoom-1.image"><br>编写controller层<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3349a49f574047b5833330c40ee87b6d~tplv-k3u1fbpfcp-zoom-1.image"><br>最后要注意启动类需要加一个@MapperScan注解用于扫描mapper,这里是mybatis来扫描mapper文件</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebb7118fe29d4ccd9387c5c5f9c6f33c~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Restful</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>利用通用mapper进行数据库查询操作</title>
    <url>/2020/11/19/%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8mapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>案例：使用example创建查询条件进行相关查询。<br>例如查询数据库中是否存在某个用户名。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/864beb5a1c714781878bcba260d006b5~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dd41d13edca4c98bd97b1861c9d66d6~tplv-k3u1fbpfcp-watermark.image"></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>maven项目导入依赖构建SpringBoot项目</title>
    <url>/2020/11/18/maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96%E6%9E%84%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1、首先导入相关依赖"><a href="#1、首先导入相关依赖" class="headerlink" title="1、首先导入相关依赖"></a>1、首先导入相关依赖</h2><pre class=" language-xml"><code class="language-xml">//引入parent依赖，引入后就代表项目是springboot项目
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
//设置资源属性
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
//springboot的子依赖，第一个依赖就是springboot依赖，并且排除了自带的日志依赖，第二个依赖是web相关依赖
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
// spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、编写配置文件及相应启动类"><a href="#2、编写配置文件及相应启动类" class="headerlink" title="2、编写配置文件及相应启动类"></a>2、编写配置文件及相应启动类</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8166e4e3451a424dabbbe2d05262f8d0~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e4c620138a44b98b788699b7619d935~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fddbc570379c44b2b7f2681294902906~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c96c5c6b7d8f4d5186c8ac5605e2bfe6~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="4、看一下-SpringBootApplication这个注解"><a href="#4、看一下-SpringBootApplication这个注解" class="headerlink" title="4、看一下@SpringBootApplication这个注解"></a>4、看一下@SpringBootApplication这个注解</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09e0da99b2324ba49cf63b9bdc43977c~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><strong>里面包含三个关键注解</strong><br>@SpringBootConfiguration</p>
<p>首先谈谈@Configuration注解</p>
<p>定义一个实体类Person</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"Person&amp;#123;"</span> <span class="token operator">+</span>
                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>定义Config类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.atguigu"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Person <span class="token function">person01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>测试<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fa5643b014944e0a2b80d1ecd95b636~tplv-k3u1fbpfcp-zoom-1.image"><br>结果<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d01313c7480441cb9fdf76ca46b5812~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>以上可以说明其实@Configuration配置可以把里面的bean装入容器里面，这个容器也就是applicationContext里面的bean被扫描后都可以装入容器中。</p>
<p>其次谈谈@SpringBootConfiguration注解, @SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类，<br>并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f63fcffb6db44ae5952d14c8118da941~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>结果<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69a88840456a401b98b4c62ada18dabb~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>跳台阶问题的几种变形</title>
    <url>/2020/11/19/%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、一次可以跳一个台阶或者两个台阶"><a href="#1、一次可以跳一个台阶或者两个台阶" class="headerlink" title="1、一次可以跳一个台阶或者两个台阶"></a>1、一次可以跳一个台阶或者两个台阶</h2><pre><code>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n级的台阶总共有多少种跳法。
示例 1：
输入：n = 2
输出：2

示例 2：
输入：n = 7
输出：21

提示：
0 &lt;= n &lt;= 100</code></pre>
<pre><code>思路：
设跳上 n 级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况：跳上 1 级或 2 级台阶。

1、当为 1 级台阶： 剩 n-1个台阶，此情况共有 f(n?1) 种跳法；
2、当为 2 级台阶： 剩 n-2个台阶，此情况共有 f(n?2) 种跳法。
f(n) 为以上两种情况之和，即 f(n)=f(n-1)+f(n-2)</code></pre>
<pre><code>class Solution &#123;
    public int numWays(int n) &#123;
        if (n == 0)
            return 1;
        if (n &lt;= 2)
            return n;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i &lt;= n; i++) &#123;
            dp[i] = (dp[i - 1] + dp[i - 2]);
        &#125;
        return dp[n];
    &#125;
&#125;</code></pre>
<h2 id="2、一次可以跳一个台阶、两个台阶或者三个台阶"><a href="#2、一次可以跳一个台阶、两个台阶或者三个台阶" class="headerlink" title="2、一次可以跳一个台阶、两个台阶或者三个台阶"></a>2、一次可以跳一个台阶、两个台阶或者三个台阶</h2><pre class=" language-txt"><code class="language-txt">一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶，还可以跳上3级台阶。
求该青蛙跳上一个 n级的台阶总共有多少种跳法。</code></pre>
<pre><code>思路：
最后一步可能是从第n-1阶往上走1阶、从n-2阶往上走2阶，或从第n-3阶往上走3阶。
因此，抵达最后一阶的走法，其实就是抵达这最后三阶的方式的总和。</code></pre>
<pre><code>class Solution &#123;
    public static int numWays(int n) &#123;
        if (n == 0)
            return 1;
        if (n == 2)
            return 2;
        if (n == 3)
            return 4;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 4;
        for (int i = 4; i &lt;= n; i++) &#123;
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
        &#125;
        return dp[n];
    &#125;

&#125;</code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中的事务传播机制</title>
    <url>/2020/11/20/Spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="1、以下是事物的传播机制："><a href="#1、以下是事物的传播机制：" class="headerlink" title="1、以下是事物的传播机制："></a>1、以下是事物的传播机制：</h2><pre><code>@Transactional(propagation=Propagation.REQUIRED)
如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)
换句话说，使用当前的事务，如果当前没有事务，则自己新建一个事务，
子方法是必须运行在一个事务中的，如果当前存在事务，则加入这个事务，成为一个整体
@Transactional(propagation=Propagation.SUPPORTS)
如果当前有事务，则使用事务，如果当前没有事务，则不使用事务
@Transactional(propagation=Propagation.MANDATORY)
必须在一个已有的事务中执行,否则抛出异常
@Transactional(propagation=Propagation.REQUIRES_NEW)
不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务
@Transactional(propagation=Propagation.NOT_SUPPORTED)
容器不为这个方法开启事务
@Transactional(propagation=Propagation.NEVER)
必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</code></pre>
<h2 id="2、代码验证说明："><a href="#2、代码验证说明：" class="headerlink" title="2、代码验证说明："></a>2、代码验证说明：</h2><h3 id="2-1-无任何事务"><a href="#2-1-无任何事务" class="headerlink" title="2.1 无任何事务"></a>2.1 无任何事务</h3><pre><code>// service层
public interface StuService &#123;
    public void saveParent();
    public void saveChildren();
&#125;
// service实现类
@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>//测试service接口及实现类

public interface TransTest &#123;
    public void testPropagationTrans();
&#125;


@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<pre><code>// 单元测试

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)  //配置启动类
public class Test &#123;
    @Autowired
    private TransTest transTest;
    @org.junit.Test
    public void myTest()&#123;
        transTest.testPropagationTrans();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfc2a4bf478b4cc9994717b5f651a0ca~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-2-测试Propagation-REQUIRED"><a href="#2-2-测试Propagation-REQUIRED" class="headerlink" title="2.2 测试Propagation.REQUIRED"></a>2.2 测试Propagation.REQUIRED</h3><h4 id="2-2-1-父方法有Propagation-REQUIRED"><a href="#2-2-1-父方法有Propagation-REQUIRED" class="headerlink" title="2.2.1 父方法有Propagation.REQUIRED"></a>2.2.1 父方法有Propagation.REQUIRED</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>数据库未新增任何数据。</p>
<h4 id="2-2-2-子方法有Propagation-REQUIRED"><a href="#2-2-2-子方法有Propagation-REQUIRED" class="headerlink" title="2.2.2 子方法有Propagation.REQUIRED"></a>2.2.2 子方法有Propagation.REQUIRED</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46285d8259ba45c792eeaab1f567875a~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-3-Propagation-SUPPORTS"><a href="#2-3-Propagation-SUPPORTS" class="headerlink" title="2.3 Propagation.SUPPORTS"></a>2.3 Propagation.SUPPORTS</h3><h4 id="2-3-1子方法SUPPORTS-父方法无事务"><a href="#2-3-1子方法SUPPORTS-父方法无事务" class="headerlink" title="2.3.1子方法SUPPORTS,父方法无事务"></a>2.3.1子方法SUPPORTS,父方法无事务</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.SUPPORTS)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef1462ba34a844d39e29dd518262f6d5~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-3-2-子方法SUPPORTS-父方法REQUIRD"><a href="#2-3-2-子方法SUPPORTS-父方法REQUIRD" class="headerlink" title="2.3.2 子方法SUPPORTS,父方法REQUIRD"></a>2.3.2 子方法SUPPORTS,父方法REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.SUPPORTS)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>数据库无任何新增。</p>
<h3 id="2-4-Propagation-MANDATORY"><a href="#2-4-Propagation-MANDATORY" class="headerlink" title="2.4 Propagation.MANDATORY"></a>2.4 Propagation.MANDATORY</h3><h4 id="2-4-1-子方法有MANDATORY，父方法无事务"><a href="#2-4-1-子方法有MANDATORY，父方法无事务" class="headerlink" title="2.4.1 子方法有MANDATORY，父方法无事务"></a>2.4.1 子方法有MANDATORY，父方法无事务</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.MANDATORY)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果抛出异常：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/373e609151514365825e49daca15c250~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-4-2-子方法有MANDATORY，父方法有有REQUIRD"><a href="#2-4-2-子方法有MANDATORY，父方法有有REQUIRD" class="headerlink" title="2.4.2 子方法有MANDATORY，父方法有有REQUIRD"></a>2.4.2 子方法有MANDATORY，父方法有有REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.MANDATORY)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：数据库无任何变化。</p>
<h3 id="2-5-Propagation-REQUIRES-NEW"><a href="#2-5-Propagation-REQUIRES-NEW" class="headerlink" title="2.5 Propagation.REQUIRES_NEW"></a>2.5 Propagation.REQUIRES_NEW</h3><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：因为其新启动了一个事务，因此，子方法失败，父方法是另一个事务，接收到子方法的失败后，自身也失败，数据库无任何新增数据。</p>
<h3 id="2-6-Propagation-NOT-SUPPORTED"><a href="#2-6-Propagation-NOT-SUPPORTED" class="headerlink" title="2.6 Propagation.NOT_SUPPORTED"></a>2.6 Propagation.NOT_SUPPORTED</h3><h4 id="2-6-1-子Propagation-NOT-SUPPORTED，父无"><a href="#2-6-1-子Propagation-NOT-SUPPORTED，父无" class="headerlink" title="2.6.1 子Propagation.NOT_SUPPORTED，父无"></a>2.6.1 子Propagation.NOT_SUPPORTED，父无</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NOT_SUPPORTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3274c07c46d4289b9bd8014fe10c4b5~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-6-2-子Propagation-NOT-SUPPORTED，父Propagation-REQUIRD"><a href="#2-6-2-子Propagation-NOT-SUPPORTED，父Propagation-REQUIRD" class="headerlink" title="2.6.2 子Propagation.NOT_SUPPORTED，父Propagation.REQUIRD"></a>2.6.2 子Propagation.NOT_SUPPORTED，父Propagation.REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NOT_SUPPORTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce72695e4235407b80dfeb0bc17da0aa~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-7-Propagation-NEVER"><a href="#2-7-Propagation-NEVER" class="headerlink" title="2.7 Propagation.NEVER"></a>2.7 Propagation.NEVER</h3><h4 id="2-7-1-子Propagation-NEVER，父Propagation-REQUIRD"><a href="#2-7-1-子Propagation-NEVER，父Propagation-REQUIRD" class="headerlink" title="2.7.1 子Propagation.NEVER，父Propagation.REQUIRD"></a>2.7.1 子Propagation.NEVER，父Propagation.REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NEVER)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b3e5b1970ee43019d79d47068b19bd8~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-7-2-子Propagation-NEVER，父无"><a href="#2-7-2-子Propagation-NEVER，父无" class="headerlink" title="2.7.2 子Propagation.NEVER，父无"></a>2.7.2 子Propagation.NEVER，父无</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NEVER)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b3e5b1970ee43019d79d47068b19bd8~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-8-Propagation-NESTED"><a href="#2-8-Propagation-NESTED" class="headerlink" title="2.8 Propagation.NESTED"></a>2.8 Propagation.NESTED</h3><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NESTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
     @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>无任何数据。<br>即，如果当前有事务，则开启子事务(嵌套事务)，嵌套事务是独立提交或者回滚；如果当前没有事务，则同REQUIRD。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
