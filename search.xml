<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop-HDFS之Api编程</title>
    <url>/2020/12/05/Hadoop-HDFS%E4%B9%8BApi%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、开发环境搭建"><a href="#一、开发环境搭建" class="headerlink" title="一、开发环境搭建"></a>一、开发环境搭建</h2><p>这里使用Maven项目构建开发环境,相关配置如下。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc.bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-train<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--版本管理--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hadoop.version</span><span class="token punctuation">></span></span>2.6.0-cdh5.15.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hadoop.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- cloudera 的仓库 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>cloudera<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>hadoop.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h2 id="二、编写相关API"><a href="#二、编写相关API" class="headerlink" title="二、编写相关API"></a>二、编写相关API</h2><pre class=" language-txt"><code class="language-txt">import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IOUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.net.URI;

/**
 * 使用java API操作HDFS文件系统
 */
public class HDFSApp &#123;
    public static final String HDFS_PATH = "hdfs://121.**.***.81:8020/";
    FileSystem fileSystem = null;
    Configuration conf = null;

    @Before //测试前的相关代码
    public void setUp() throws Exception &#123;
        conf = new Configuration();
        /**
         * 构造一个访问指定HDFS系统的客户端对象
         * 第一个参数：HDFS的URI
         * 第二个参数：客户端的配置参数
         * 第三个参数：客户端的身份,说白了就是用户名
         */
        conf.set("dfs.client.use.datanode.hostname", "true");
        fileSystem = FileSystem.get(new URI(HDFS_PATH), conf,"root");
    &#125;

    /**
     * 创建HDFS文件夹
     */
    @Test
    public void test() throws Exception &#123;
        Path path = new Path("/hdfsapi/test");
        boolean res = fileSystem.mkdirs(path);
        System.out.println(res);
    &#125;

    /**
     * 查看HDFS内容
     */
    @Test
    public void test1() throws Exception&#123;
        FSDataInputStream in = fileSystem.open(new Path("/test.txt"));
        IOUtils.copyBytes(in,System.out,1024);
    &#125;
    @After
    public void tearDown()&#123;
        conf = null;
        fileSystem = null;
    &#125;
&#125;</code></pre>
<p>这里需要注意的是hadoop部署在阿里云上，在测试open方法读取文件的时候出现了错误，但是创建文件及文件夹都没有错误，读取文件的具体错误如下：  </p>
<pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>BlockMissingException<span class="token operator">:</span> Could not obtain block<span class="token operator">:</span> BP<span class="token operator">-</span><span class="token number">613411839</span><span class="token operator">-</span>  
<span class="token number">172.26</span><span class="token punctuation">.</span><span class="token number">224.239</span><span class="token operator">-</span><span class="token number">1606657223979</span><span class="token operator">:</span>blk_1073741829_1005 file<span class="token operator">=</span><span class="token operator">/</span>test<span class="token punctuation">.</span>txt</code></pre>
<p>原因:</p>
<p>查阅资料发现 HDFS 中的文件夹和文件名都是存放在 NameNode 上，操作不需要和 DataNode 通信，因此可以正常创建文件夹和创建文件说明本地和远程 NameNode 通信没有问题。</p>
<p>文件夹和文件名都是存放在 NameNode 上的，我本地可以通过公网访问 NameNode，所以创建文件夹和文件都可以，但是当我写数据的时候，NameNode 和DataNode 是通过内网通信的，NameNode 会返回给我 DataNode 的内网 IP，我本地就访问不了了。</p>
<p>还有一种可能，云服务器没有开放 DataNode 用于数据传输服务端口 默认是 50010。</p>
<p>解决方案：<br>1、添加一句配置，使 NameNode 返回 DataNode 的主机名而不是 IP：</p>
<pre class=" language-java"><code class="language-java">configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.client.use.datanode.hostname"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>另外也可以配置 hdfs-site.xml 文件内容如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.use.datanode.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre>
<p>2、本地可以拿到了 DataNode 的主机名，要访问还需要配置本地 Hosts 映射。</p>
<pre><code>121.89.195.**  ch**j***</code></pre>
<pre><code>windows 下 hosts 文件地址：C:\Windows\System32\drivers\etc\hosts</code></pre>
<p>3、云服务器打开 50010 端口</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS的常用命令行</title>
    <url>/2020/12/09/HDFS%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<p><strong>通过hadoop fs 可以查看相关命令</strong></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80f4670dfb174ddb8b8fe2c9fd501323~tplv-k3u1fbpfcp-watermark.image"><br><strong>1、列出HDFS文件</strong></p>
<pre><code>列出根目录下的所有文件
hadoop fs -ls /</code></pre>
<p><strong>2、上传文件到HDFS</strong></p>
<pre><code>将本地根目录下的README.txt上传到hdfs根目录下
hadoop fs –put /README.txt /</code></pre>
<p><strong>3、查看HDFS文件</strong></p>
<pre><code>hadoop fs -text /readme.txt
hadoop fs -cat /readme.txt</code></pre>
<p><strong>4、从本地上传文件到hdfs</strong></p>
<pre><code>hadoop fs -copyFromLocal /readme1.txt / // 保留本地文件
hadoop fs -moveFromLocal /readme1.txt / // 不保留本地文件</code></pre>
<p><strong>5、从hdfs上获取文件到本地</strong></p>
<pre><code>hadoop fs -get /readme1.txt /</code></pre>
<p><strong>6、在hdfs上创建文件夹</strong></p>
<pre><code>hadoop fs -mkdir /hdfs-test</code></pre>
<p><strong>7、在hdfs内部移动文件</strong></p>
<pre><code>hadoop fs -mv /readme.txt /hdfs-test</code></pre>
<p><strong>8、获取hdfs文件并且进行合并</strong><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80317b0f80e441089d75fe9fa571a45f~tplv-k3u1fbpfcp-watermark.image"></p>
<pre><code>hadoop fs -getmerge /hdfs-test ./txt
将hdfs-test文件夹内部的文件合并并且获取到本地的当前文件夹下命名为txt</code></pre>
<p><strong>9、删除文件及文件夹</strong></p>
<pre><code>hadoop fs -rm /readme1.txt // 删除文件
hadoop fs -rmr /hdfs-test  // 删除文件夹(包含内容)</code></pre>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop入门</title>
    <url>/2020/12/18/Hadoop%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-Hadoop发行版介绍"><a href="#1-Hadoop发行版介绍" class="headerlink" title="1 Hadoop发行版介绍"></a>1 Hadoop发行版介绍</h2><p>Hadoop三大发行版本：Apache、Cloudera、Hortonworks。<br>Apache版本最原始（最基础）的版本，适合基础学习。<br>Cloudera内部集成了很多大数据框架，对应产品CDH。<br>Hortonworks文档较好，对应产品HDP。<br>目前使用最多的是后两种。</p>
<h3 id="1-1-Apache-Hadoop"><a href="#1-1-Apache-Hadoop" class="headerlink" title="1.1 Apache Hadoop"></a>1.1 Apache Hadoop</h3><p>官网地址：<a href="http://hadoop.apache.org/releases.html">http://hadoop.apache.org/releases.html</a><br>下载地址：<a href="https://archive.apache.org/dist/hadoop/common/">https://archive.apache.org/dist/hadoop/common/</a>  </p>
<h3 id="1-2-Cloudera-Hadoop"><a href="#1-2-Cloudera-Hadoop" class="headerlink" title="1.2 Cloudera Hadoop"></a>1.2 Cloudera Hadoop</h3><p>官网地址：<a href="https://www.cloudera.com/downloads/cdh/5-10-0.html">https://www.cloudera.com/downloads/cdh/5-10-0.html</a><br>下载地址：<a href="http://archive.cloudera.com/cdh5/cdh/5/">http://archive.cloudera.com/cdh5/cdh/5/</a></p>
<h3 id="1-3-Hortonworks-Hadoop"><a href="#1-3-Hortonworks-Hadoop" class="headerlink" title="1.3 Hortonworks Hadoop"></a>1.3 Hortonworks Hadoop</h3><p>官网地址：<a href="https://hortonworks.com/products/data-center/hdp/">https://hortonworks.com/products/data-center/hdp/</a><br>下载地址：<a href="https://hortonworks.com/downloads/#data-platform">https://hortonworks.com/downloads/#data-platform</a>  </p>
<h2 id="2-Hadoop的优势"><a href="#2-Hadoop的优势" class="headerlink" title="2 Hadoop的优势"></a>2 Hadoop的优势</h2><p>1、高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个元素或存储出现故障，也不会导致数据的丢失<br>2、高扩展性：在集群间分配任务数据，可方便地扩展数以千计的节点。<br>3、高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。<br>4、高容错性：能够自动将失败的任务重新分配。</p>
<h2 id="3-Hadoop组成"><a href="#3-Hadoop组成" class="headerlink" title="3 Hadoop组成"></a>3 Hadoop组成</h2><h3 id="3-1-Hadoop1-x和Hadoop2-x区别："><a href="#3-1-Hadoop1-x和Hadoop2-x区别：" class="headerlink" title="3.1 Hadoop1.x和Hadoop2.x区别："></a>3.1 Hadoop1.x和Hadoop2.x区别：</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/607cdb08937846e795c58ec06cd6a9e7~tplv-k3u1fbpfcp-watermark.image"><br>注：Hadoop3.X与Hadoop2.X架构没有大变化</p>
<h3 id="3-2-HDFS架构概述"><a href="#3-2-HDFS架构概述" class="headerlink" title="3.2 HDFS架构概述"></a>3.2 HDFS架构概述</h3><p><strong>对磁盘进行调度</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc4515ead5b141de8983fce22821c635~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="3-3-YARN架构概述"><a href="#3-3-YARN架构概述" class="headerlink" title="3.3 YARN架构概述"></a>3.3 YARN架构概述</h3><p><strong>对CPU和内存进行调度</strong><br>Yarn支持主从架构，主节点最多可以有两个，从节点可以有多个。<br>主节点(Resource Manager)进程主要负责集群资源的分配和管理，从节点(Node Manager)主要负责单节点资源管理。</p>
<h4 id="3-3-1-Resource-Manager"><a href="#3-3-1-Resource-Manager" class="headerlink" title="3.3.1 Resource Manager"></a>3.3.1 Resource Manager</h4><p>主要作用：<br>1、处理客户端请求<br>2、监控NodeManager<br>3、启动或监控ApplicationMaster<br>4、资源的分配与调度  </p>
<h4 id="3-3-2-Node-Manager"><a href="#3-3-2-Node-Manager" class="headerlink" title="3.3.2 Node Manager"></a>3.3.2 Node Manager</h4><p>主要作用：<br>1、管理单个节点上的资源<br>2、处理来自ResourceManager的命令<br>3、处理来自ApplicationMaster的命令</p>
<h4 id="3-3-3-Application-Master"><a href="#3-3-3-Application-Master" class="headerlink" title="3.3.3 Application Master"></a>3.3.3 Application Master</h4><p>1、负责数据的切分<br>2、为应用程序申请资源并分配给内部的任务<br>3、任务的监控与容错</p>
<h4 id="3-3-4-Container"><a href="#3-3-4-Container" class="headerlink" title="3.3.4 Container"></a>3.3.4 Container</h4><p>Container是中的资源抽象，它封装了某个节点上的多维度资源。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ada3889e70a74e2a96b71a199b6fdc9e~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="3-4-MapReduce概述"><a href="#3-4-MapReduce概述" class="headerlink" title="3.4 MapReduce概述"></a>3.4 MapReduce概述</h3><p>MapReduce是一个编程模型，计算框架，主要负责海量数据的计算。<br>MapReduce将计算过程分为两个阶段：Map和Reduce<br>Map阶段是一个独立的程序，会在很多节点上同时执行，每个节点处理一部分数据。<br>Reduce阶段也是一个独立程序，Reduce可以理解为一个单独的聚合程序。<br>1）Map阶段并行处理输入数据<br>2）Reduce阶段对Map结果进行汇总<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8915679fc1af49b7afb1ba70eb97ac3b~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="4-大数据生态区介绍"><a href="#4-大数据生态区介绍" class="headerlink" title="4 大数据生态区介绍"></a>4 大数据生态区介绍</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2baf6579783a4694a0f31cae10ba9fac~tplv-k3u1fbpfcp-watermark.image"></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SpringBoot进行单元测试</title>
    <url>/2020/11/19/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h2><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、编写相关测试用例"><a href="#2、编写相关测试用例" class="headerlink" title="2、编写相关测试用例"></a>2、编写相关测试用例</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c999a60091524928b871b5e42dea587d~tplv-k3u1fbpfcp-zoom-1.image" alt="avatar"></p>
<p>注意，单元测试需要添加如下注解:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//配置启动类</span>
</code></pre>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>HiKaricp数据库连接池的使用</title>
    <url>/2020/11/18/HiKaricp%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近学习到除druid外，一种网上评论更快的数据库连接池，hikaricp,以下是SpringBoot集成HiKaricp</p>
<h2 id="1、首先在springboot项目中引入mybatis及mysql的相关依赖。"><a href="#1、首先在springboot项目中引入mybatis及mysql的相关依赖。" class="headerlink" title="1、首先在springboot项目中引入mybatis及mysql的相关依赖。"></a>1、首先在springboot项目中引入mybatis及mysql的相关依赖。</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、其次在application-yml中做相应的配置"><a href="#2、其次在application-yml中做相应的配置" class="headerlink" title="2、其次在application.yml中做相应的配置"></a>2、其次在application.yml中做相应的配置</h2><p>相应配置如下</p>
<pre class=" language-yml"><code class="language-yml">
#tomcat配置
server:
  port: 8088
  tomcat:
    uri-encoding: UTF-8
  max-http-header-size: 80KB


#连接池配置
spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/foodie-shop?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
    username: root
    password: root
    hikari:
      connection-timeout: 30000 #等待连接池分配连接的最大时常（毫秒），超过这个时常还没有可用的连接则会发生SQLException,默认：30秒
      minimum-idle: 5 #最小连接数
      maximum-pool-size: 20 #最大连接数
      auto-commit: true #自动提交
      idle-timeout: 600000 #连接超时的最大时长(毫秒)，超时则被释放(retired)
      pool-name: DataSourceHikariCP #连接池名字
      max-lifetime: 1800000 #连接的生命时长(毫秒)，超时而且没被使用则被释放
      connection-test-query: SELECT 1


#mybatis配置

mybatis:
  type-aliases-package: com.imooc.pojo #实体类的存放位置
  mapper-locations: classpath:mapper/*.xml #mappery映射文件</code></pre>
]]></content>
      <categories>
        <category>HiKaricp</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>HiKaricp</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis逆向生成工具</title>
    <url>/2020/11/17/MyBatis%E9%80%86%E5%90%91%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>简介：MyBatis数据库逆向生成工具，包含Mybatis-generator以及MyMapper插件，通过这个工具可以生成pojo实体类，<em>mapper.xml以及</em>mapper.java三种文件。</p>
<h2 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c03fe2d70c2e46ca8ed2d0671b085c1d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="1、通用mapper接口"><a href="#1、通用mapper接口" class="headerlink" title="1、通用mapper接口"></a>1、通用mapper接口</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45342bb86d8d413e831c979add4c4ded~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p>配置模板如下：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MysqlContext<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span> <span class="token attr-name">defaultModelType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beginningDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>endingDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 通用mapper所在目录 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tk.mybatis.mapper.generator.MapperPlugin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.my.mapper.MyMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>
                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/foodie-shop-dev<span class="token punctuation">"</span></span>
                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>
                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 对应生成的pojo所在包 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 对应生成的mapper所在目录 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 配置mapper对应的java映射 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 数据库表 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="carousel">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="category">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_comments">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_img">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_param">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="items_spec">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="order_items">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="order_status">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="orders">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="user_address">&lt;/table>--></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;table tableName="users">&lt;/table>--></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3、生成执行类"><a href="#3、生成执行类" class="headerlink" title="3、生成执行类"></a>3、生成执行类</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a5c47e257674fb7bdc9509f6747d7b2~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖-同时需要将逆向生成工具中的通用mapper粘贴进来。"><a href="#4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖-同时需要将逆向生成工具中的通用mapper粘贴进来。" class="headerlink" title="4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖,同时需要将逆向生成工具中的通用mapper粘贴进来。"></a>4、生成完成后可以将生成后的三种拷贝到自己的项目中，但是需要注意，此时原项目父工程需要引入依赖,<strong>同时需要将逆向生成工具中的通用mapper粘贴进来。</strong></h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>同时，项目的配置文件需要修改</p>
<pre class=" language-xml"><code class="language-xml">mapper:
  mappers: com.imooc.my.mapper.MyMapper #通用mapper的位置
  not-empty: false #在进行数据库操作的时候，判断表达式 是否为空
  #例如 username != null,是否追加 username != ''，尽量自己手写
  identity: MYSQL</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b9bf6d0d83e444fac1f25de2a4e23c5~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>需要注意的是在配置文件中指定了实体类和mapper.xml文件的存放位置，但是*mapper.java文件的位置没有指定，在启动类中通过@MapperScan指定了。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合log4j输出日志</title>
    <url>/2020/11/22/SpringBoot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="1、首先剔除springboot自带的logging日志，因为其内容包含的太多。"><a href="#1、首先剔除springboot自带的logging日志，因为其内容包含的太多。" class="headerlink" title="1、首先剔除springboot自带的logging日志，因为其内容包含的太多。"></a>1、首先剔除springboot自带的logging日志，因为其内容包含的太多。</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f1b4d49f0c450b887bbb2df050c88a~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span> // 剔除springboot自带的logging
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>剔除后再启动项目，可以发现控制台的输出，缺少日志，并且无端口号之类的信息.<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7c5054094be45218054a5784ff385fe~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="2、加入日志相关依赖"><a href="#2、加入日志相关依赖" class="headerlink" title="2、加入日志相关依赖"></a>2、加入日志相关依赖</h2><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 日志相关 抽象层及实现层 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>效果图:<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ea618ec6f0444e6a60d0ba9ac2914dc~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="3、编写相关配置文件log4j-properties"><a href="#3、编写相关配置文件log4j-properties" class="headerlink" title="3、编写相关配置文件log4j.properties"></a>3、编写相关配置文件log4j.properties</h2><pre class=" language-xml"><code class="language-xml">log4j.rootLogger=DEBUG,stdout,file
log4j.additivity.org.apache=true

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.threshold=INFO
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%-5p %c<span class="token entity" title="&#123;">&amp;#123;</span>1<span class="token entity" title="&#125;">&amp;#125;</span>:%L - %m%n

log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.DatePattern='.'yyyy-MM-dd-HH-mm
log4j.appender.file.layout.ConversionPattern=%d<span class="token entity" title="&#123;">&amp;#123;</span>yyyy-MM-dd HH:mm:ss<span class="token entity" title="&#125;">&amp;#125;</span> %-5p %c<span class="token entity" title="&#123;">&amp;#123;</span>1<span class="token entity" title="&#125;">&amp;#125;</span>::%L - %m%n
log4j.appender.file.Threshold=INFO
log4j.appender.file.append=true
log4j.appender.file.File=/workspaces/logs/foodie-api/mylog.log
</code></pre>
<p>效果图:</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c1835ece22498ab520fec2904671dd~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<h2 id="4、项目中的使用"><a href="#4、项目中的使用" class="headerlink" title="4、项目中的使用"></a>4、项目中的使用</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/152078da697143ce85f031930ee32a5f~tplv-k3u1fbpfcp-watermark.webp" alt="avatar"></p>
<p>注意Logger是 org.slf4j包下的。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目打war包流程</title>
    <url>/2020/12/18/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93war%E5%8C%85%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>目前，前后端分离的架构已成主流，因此使用springboot构建应用是非常快速的，项目发布到服务器上的时候，只需要打成一个jar包，然后通过命令 : java -jar jar包名称即可启动服务了；</p>
<p>但在有些场景下，比如部署到外部的服务器的时候，客户方指定要以tomcat的形式启动服务的时候，即需要由服务提供方提供一个war包的时候，该怎么办呢？</p>
<p>一开始没有查找资料，自己差点准备使用传统的ssm框架改造服务的，后来思考和参考相关资料后，发现只需要挤出简单的配置和改造就可以做到，下面是记载将springboot项目改造打包成war的流程，算是一个简单的参考：</p>
<h2 id="1、将pom中打包的配置从jar改成war"><a href="#1、将pom中打包的配置从jar改成war" class="headerlink" title="1、将pom中打包的配置从jar改成war"></a>1、将pom中打包的配置从jar改成war</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--默认为jar方式--></span>
<span class="token comment" spellcheck="true">&lt;!--&lt;packaging>jar&lt;/packaging>--></span>
<span class="token comment" spellcheck="true">&lt;!--改为war方式--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、排除springboot内置的tomcat干扰"><a href="#2、排除springboot内置的tomcat干扰" class="headerlink" title="2、排除springboot内置的tomcat干扰"></a>2、排除springboot内置的tomcat干扰</h2><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--最终打成war包，排除内置的tomcat--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>有人说也可以添加一个tomcat的依赖，这种方式也许是可以的，但是我没有尝试，大多数推荐的还是上面一种，即排除掉内置的tomcat。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="3、pom文件添加如些依赖"><a href="#3、pom文件添加如些依赖" class="headerlink" title="3、pom文件添加如些依赖"></a>3、pom文件添加如些依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加servlet-api的依赖,用来打war包  --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>这个依赖主要是用于在和jsp进行整合的使用，可酌情添加。</p>
<h2 id="4、改造启动类"><a href="#4、改造启动类" class="headerlink" title="4、改造启动类"></a>4、改造启动类</h2><p>1.方式一，启动类继承SpringBootServletInitializer实现configure：</p>
<pre class=" language-txt"><code class="language-txt">@SpringBootApplication
public class Application extends SpringBootServletInitializer &#123;

    public static void main(String[] args) &#123;
        SpringApplication.run(Application.class, args);
    &#125;

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;
        return builder.sources(Application.class);
    &#125;
&#125;</code></pre>
<p>2.方式二，新增加一个类继承SpringBootServletInitializer实现configure：</p>
<pre class=" language-txt"><code class="language-txt">public class ServletInitializer extends SpringBootServletInitializer &#123;

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;
        //此处的Application.class为带有@SpringBootApplication注解的启动类
        return builder.sources(Application.class);
    &#125;
&#125;</code></pre>
<h2 id="5、打包"><a href="#5、打包" class="headerlink" title="5、打包"></a>5、打包</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f69cb06327c491aac37b13a2043a87d~tplv-k3u1fbpfcp-watermark.image"></p>
<p>参考链接：  </p>
<pre><code>https://blog.csdn.net/qq_33512843/article/details/80951741  
https://blog.csdn.net/zhangcongyi420/article/details/100065407?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control
https://blog.csdn.net/pengweismile/article/details/95897988</code></pre>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA自动重置language level和java compiler的解决</title>
    <url>/2020/12/05/idea%E8%87%AA%E5%8A%A8%E9%87%8D%E7%BD%AElanguage%20level%E5%92%8Cjava%20compiler%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p>  很多同学可能会遇到这种情况，某次加载多模块的工程时，会报java compiler不合理的错误，这是要重新配置language level和java compiler的节奏；今天笔者跟大伙就这个问题唠唠嗑</p>
<h2 id="2-场景还原"><a href="#2-场景还原" class="headerlink" title="2.场景还原"></a>2.场景还原</h2><p>①加载新工程，一般会抛错</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3b03676de34458a364c97acf5d1ac5~tplv-k3u1fbpfcp-watermark.image"><br>②根据该问题，配置如下</p>
<p>配置java compiler</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2fb80979b744bfb078a02f6d639ac4~tplv-k3u1fbpfcp-watermark.image"><br>配置language level</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bcf7fa5de2b44e48166b74942444363~tplv-k3u1fbpfcp-watermark.image"></p>
<p>这样配置后，基本上okl了，但是重新加载后，这种情况可能还会出现</p>
<h2 id="3-杀手锏"><a href="#3-杀手锏" class="headerlink" title="3.杀手锏"></a>3.杀手锏</h2><p>在父工程的pom中添加如下配置</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>
<p><strong>亲测有用</strong>  </p>
<p>参考链接：</p>
<pre><code>https://blog.csdn.net/zhangxing52077/article/details/78728040</code></pre>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>maven构建聚合工程</title>
    <url>/2020/11/18/maven%E6%9E%84%E5%BB%BA%E8%81%9A%E5%90%88%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Maven中的打包方式"><a href="#Maven中的打包方式" class="headerlink" title="Maven中的打包方式"></a>Maven中的打包方式</h2><p>maven中打包方式有三种，pom,war,jar，一般在父模块打包方式选pom,子模块再指定相应的war或者jar，其标签如下：</p>
<pre><code> &lt;packaging&gt;&lt;/packaging&gt;</code></pre>
<h2 id="SpringBoot构建聚合工程步骤"><a href="#SpringBoot构建聚合工程步骤" class="headerlink" title="SpringBoot构建聚合工程步骤"></a>SpringBoot构建聚合工程步骤</h2><h3 id="1、父工程构建"><a href="#1、父工程构建" class="headerlink" title="1、父工程构建"></a>1、父工程构建</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8290f8b0c42b4897886bcc1ff97534c6~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="2、子工程构建"><a href="#2、子工程构建" class="headerlink" title="2、子工程构建"></a>2、子工程构建</h3><p>1、在父模块点击new module<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/238211cbd250462baa4118b2708dbc63~tplv-k3u1fbpfcp-zoom-1.image"><br>2、next下一步即可<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/921d56a58eb9466b9e1a6b1ec1d30cdf~tplv-k3u1fbpfcp-zoom-1.image"><br>在这里可以看出子模块清晰地标出了丛属的parent模块<br>3、子模块的pom文件<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8847ea6138524b06b2c96fc2825ea9bd~tplv-k3u1fbpfcp-zoom-1.image"><br>注意到，其默认打包方式为jar，但是我们一般喜欢显示的声明出来。</p>
<p>4、此时可以查看父模块的pom文件，发现发生了变化，父模块的pom文件多了个</p>
<pre><code> &lt;modules&gt;  &lt;/modules&gt;</code></pre>
<p>标签，并且所有的子模块都在这个标签中出现。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75f15eea4b7142d6ab63b24519ded62e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>5、子工程之间可以相互依赖，如何做到这一点呢，其实很简单，比如我们再创建一个子模块叫foodie-dev-pojo，并且在他的pom文件里加入依赖，这样，两个子工程就做到相互依赖了。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a4c99e267b04b818793a8ddf24a8c35~tplv-k3u1fbpfcp-zoom-1.image"><br>6、接下来我们又创建了mapper模块，用以存放与mybatis交互的一些mapper.jar等，这里需要注意这个子模块要依赖pojo层，原因是一些sql语句需要实体类，因此需添加相关依赖。</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e306a999fea48b38f913d0d816c1259~tplv-k3u1fbpfcp-zoom-1.image"><br>子模块的依赖关系如下<br>mapper–&gt;pojo–&gt;common，因此mapper也可以使用common中的相应方法。</p>
<p>7、接下来是service层，同理这一部分需要依赖mapper层。</p>
<pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.imooc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>foodie-dev-mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffc2e67b9d2840f58430e655dc6eb795~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>依赖关系如下：<br>service–&gt;mapper–&gt;pojo–&gt;common</p>
<p>8、最后一个子模块是api模块，也就是controller层<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25e87c918d054c7abf3a584ad2e44798~tplv-k3u1fbpfcp-zoom-1.image"><br>api层依赖了service，也可以调用mapper层，但是原则上不允许之间调mapepr层，只允许调用service层。</p>
<p>9、最后需要注意的是，我们构建完聚合工程后，一定要安装，所谓的安装就是在maven的root项目的lifecycle里双击install命令。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c444d793b2f4b989e55e11590e52c84~tplv-k3u1fbpfcp-zoom-1.image"><br>安装完成控制台会出现，build success提示。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fa4f10b9eed44c5b3c2d93979bae07f~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、聚合工程可以分为顶级项目(顶级工程、父工程)与子工程，这两者的关系其实就是父子继承的关系，子工程在maven里称之为模块(module)，模块之间是平级的，<strong>是可以相互依赖的。</strong><br>2、子模块可以使用顶级工程里的所有资源(依赖)，子模块之间如果要使用资源，必须构建依赖(构建关系)<br>3、一个顶级工程是可以由多个不同的子工程共同组合而成。这就构成了一个可以运行的项目。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven项目导入依赖构建SpringBoot项目</title>
    <url>/2020/11/18/maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96%E6%9E%84%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1、首先导入相关依赖"><a href="#1、首先导入相关依赖" class="headerlink" title="1、首先导入相关依赖"></a>1、首先导入相关依赖</h2><pre class=" language-xml"><code class="language-xml">//引入parent依赖，引入后就代表项目是springboot项目
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
//设置资源属性
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
//springboot的子依赖，第一个依赖就是springboot依赖，并且排除了自带的日志依赖，第二个依赖是web相关依赖
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
// spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2、编写配置文件及相应启动类"><a href="#2、编写配置文件及相应启动类" class="headerlink" title="2、编写配置文件及相应启动类"></a>2、编写配置文件及相应启动类</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8166e4e3451a424dabbbe2d05262f8d0~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e4c620138a44b98b788699b7619d935~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fddbc570379c44b2b7f2681294902906~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c96c5c6b7d8f4d5186c8ac5605e2bfe6~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="4、看一下-SpringBootApplication这个注解"><a href="#4、看一下-SpringBootApplication这个注解" class="headerlink" title="4、看一下@SpringBootApplication这个注解"></a>4、看一下@SpringBootApplication这个注解</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09e0da99b2324ba49cf63b9bdc43977c~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><strong>里面包含三个关键注解</strong><br>@SpringBootConfiguration</p>
<p>首先谈谈@Configuration注解</p>
<p>定义一个实体类Person</p>
<pre><code>public class Person &#123;
    private String name;
    private Integer id;

    public String getName() &#123;
        return name;
    &#125;

    public void setName(String name) &#123;
        this.name = name;
    &#125;

    public Integer getId() &#123;
        return id;
    &#125;

    public void setId(Integer id) &#123;
        this.id = id;
    &#125;

    public Person(String name, Integer id) &#123;
        this.name = name;
        this.id = id;
    &#125;

    public Person() &#123;
    &#125;

    @Override
    public String toString() &#123;
        return &quot;Person&#123;&quot; +
                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +
                &quot;, id=&quot; + id +
                &#39;&#125;&#39;;
    &#125;

&#125;
</code></pre>
<p>定义Config类</p>
<pre><code>import com.atguigu.bean.Person;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(value = &quot;com.atguigu&quot;)
public class MainConfig &#123;
    @Bean(&quot;person&quot;)
    public Person person01() &#123;
        return new Person(&quot;lisi&quot;, 20);
    &#125;
&#125;</code></pre>
<p>测试<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fa5643b014944e0a2b80d1ecd95b636~tplv-k3u1fbpfcp-zoom-1.image"><br>结果<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d01313c7480441cb9fdf76ca46b5812~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>以上可以说明其实@Configuration配置可以把里面的bean装入容器里面，这个容器也就是applicationContext里面的bean被扫描后都可以装入容器中。</p>
<p>其次谈谈@SpringBootConfiguration注解, @SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类，<br>并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f63fcffb6db44ae5952d14c8118da941~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>结果<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69a88840456a401b98b4c62ada18dabb~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>利用通用mapper进行数据库查询操作</title>
    <url>/2020/11/19/%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8mapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>案例：使用example创建查询条件进行相关查询。<br>例如查询数据库中是否存在某个用户名。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/864beb5a1c714781878bcba260d006b5~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dd41d13edca4c98bd97b1861c9d66d6~tplv-k3u1fbpfcp-watermark.image"></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Spring aop通过日志监控service执行时间</title>
    <url>/2020/11/10/%E5%9F%BA%E4%BA%8ESpring%20aop%E9%80%9A%E8%BF%87%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7service%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2-编写aspect切面类"><a href="#2-编写aspect切面类" class="headerlink" title="2.编写aspect切面类"></a>2.编写aspect切面类</h2><pre><code>package com.imooc.aspect;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
@Aspect
public class ServiceAspect &#123;
    public static final Logger logger = LoggerFactory.getLogger(ServiceAspect.class);

    /**
     * Aop通知：
     * 1. 前置通知：在方法调用之前执行
     * 2. 后置通知：在方法调用之后执行
     * 3. 环绕通知：在方法调用之前和之后，都分别可以执行通知
     * 4. 异常通知：如果在方法调用过程中发生异常，则通知
     * 5. 最终通知，在方法调用之后执行
     */
    /**
     *
     * 切面表达式
     * execution 代表所要执行的表达式主体
     * 第一处 *代表方法返回类型 *代表所有类型
     * 第二处 包名代表aop监控的类所在的包
     * 第三处 .. 代表该包以及其子包下的所有类方法
     * 第四处 * 代表类名，*代表所有类
     * 第五处 *(..) *代表类中的方法名，(..)表示方法中的任何参数
     */
    @Around(&quot;execution(* com.imooc.service.impl..*.*(..))&quot;)
    public Object recordTimeLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;
        logger.info(&quot;===== 开始执行&#123;&#125;.&#123;&#125; =====&quot;,
                joinPoint.getTarget().getClass(),
                joinPoint.getSignature().getName());
        long begin = System.currentTimeMillis();
        Object result = joinPoint.proceed();
        long end = System.currentTimeMillis();
        long takeTime = end - begin;
      if (takeTime &gt; 3000) &#123;
            logger.error(&quot;==== &#123;&#125;,执行结束，耗时：&#123;&#125; 毫秒====&quot;,joinPoint.getSignature().getName(),takeTime);
        &#125;else if(takeTime &gt; 2000)&#123;
            logger.warn(&quot;==== &#123;&#125;,执行结束，耗时：&#123;&#125; 毫秒====&quot;,joinPoint.getSignature().getName(),takeTime);
        &#125;else &#123;
            logger.info(&quot;==== &#123;&#125;,执行结束，耗时：&#123;&#125; 毫秒====&quot;,joinPoint.getSignature().getName(),takeTime);
        &#125;
        return result;
&#125;
</code></pre>
<p>执行效果<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa56bde956d24d9c91a82e134763eb27~tplv-k3u1fbpfcp-watermark.webp"><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14f0a8c7f2d743f29e8a24311748330c~tplv-k3u1fbpfcp-watermark.webp"></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring Aop</tag>
      </tags>
  </entry>
  <entry>
    <title>基于通用mapper和restful风格撰写api</title>
    <url>/2020/11/19/%E5%9F%BA%E4%BA%8E%E9%80%9A%E7%94%A8mapper%E5%92%8Crestful%E9%A3%8E%E6%A0%BC%E6%92%B0%E5%86%99api/</url>
    <content><![CDATA[<p>现数据库有一张名为Stu的表<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32558fc8b8ee4c269afd061c6fcc1060~tplv-k3u1fbpfcp-zoom-1.image"><br>基于上一个博客提到的mybatis逆向工程生成<em>mapper.java、</em>mapper.xml以及pojo实体类，编写案例StuService,以及相应的实现类StuServiceImpl，<strong>注意到的是StuServiceImpl上面需要打上@Service注解以便可以被扫描到。</strong></p>
<pre><code>import com.imooc.pojo.Stu;

public interface StuService &#123;
    public Stu getStuInfo(int id);
    public void saveStu();
    public void updateStu(int id);
    public void deleteStu(int id);
&#125;</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b448e6f375a4f5684e908972a63dfaf~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c19e06c8e0148ac90ca898303a6d29e~tplv-k3u1fbpfcp-zoom-1.image"><br>编写controller层<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3349a49f574047b5833330c40ee87b6d~tplv-k3u1fbpfcp-zoom-1.image"><br>最后要注意启动类需要加一个@MapperScan注解用于扫描mapper,这里是mybatis来扫描mapper文件</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebb7118fe29d4ccd9387c5c5f9c6f33c~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Restful</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>MyBatis</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>文档api编写插件Swagger2的使用</title>
    <url>/2020/11/19/%E6%96%87%E6%A1%A3api%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6%20Swagger2%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>为了减少程序员撰写文档，提高生产力，Swagger2应运而生，使用Swagger2可以减少编写过多的文档，只需要通过代码就能生成文档api提供给前端人员对接，非常方便。</p>
<h2 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h2><pre><code>&lt;!--swagger2配置--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.springfox&lt;/groupId&gt;
            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
            &lt;version&gt;2.4.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.springfox&lt;/groupId&gt;
            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
            &lt;version&gt;2.4.0&lt;/version&gt;
        &lt;/dependency&gt;
        以上两个是官网提供的
        以下依赖也是ui但是是非官方的
        &lt;dependency&gt;
            &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;
            &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;
            &lt;version&gt;1.6&lt;/version&gt;
        &lt;/dependency&gt;</code></pre>
<h2 id="2、编写配置类"><a href="#2、编写配置类" class="headerlink" title="2、编写配置类"></a>2、编写配置类</h2><pre><code>package com.imooc.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class Swagger2 &#123;

    // 访问地址： http://localhost:8088/swagger-ui.html
    //配置swagger2核心配置 -- docket
    @Bean
    public Docket createRestApi()&#123;
        return new Docket(DocumentationType.SWAGGER_2) // 指定api类型为swagger2
        .apiInfo(apiInfo()) // 用于定义api文档
        .select().apis(RequestHandlerSelectors.basePackage(&quot;com.imooc.controller&quot;)) // 指定controller包
        .paths(PathSelectors.any()) // 所有controller
        .build();
    &#125;
    private ApiInfo apiInfo()&#123;
        return new ApiInfoBuilder()
                .title(&quot;天天吃货 电商平台接口api&quot;) // 文档页标题
                .contact(new Contact(&quot;imooc&quot;,
                        &quot;https://www.imooc/com&quot;,
                        &quot;abc@imooc.com&quot;)) // 联系人信息
                .description(&quot;专为天天吃货提供的api文档&quot;) // 详细信息
                .version(&quot;1.0.1&quot;) //文档版本号
                .termsOfServiceUrl(&quot;https://www.imooc/com&quot;) // 网站地址
                .build();
    &#125;
&#125;
</code></pre>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0694b0325217478a8392dcbbe263b14e~tplv-k3u1fbpfcp-watermark.webp"></p>
<h2 id="3、访问效果"><a href="#3、访问效果" class="headerlink" title="3、访问效果"></a>3、访问效果</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dced80f16584f4bac1c2f9d1475b87d~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>记得加的最后一个依赖，可以通过最后一个依赖进行换肤操作，很简单，访问路径不同。<br>现在需要访问 <a href="http://localhost:8088/doc.html">http://localhost:8088/doc.html</a> 即可，效果图如下<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e276fd3865f459d863d1b82d4af7527~tplv-k3u1fbpfcp-watermark.webp"></p>
<h2 id="4、-ApiIgnore，-Api，-ApiOperation-ApiModel-ApiModelProperty用法"><a href="#4、-ApiIgnore，-Api，-ApiOperation-ApiModel-ApiModelProperty用法" class="headerlink" title="4、@ApiIgnore，@Api，@ApiOperation,@ApiModel,@ApiModelProperty用法"></a>4、@ApiIgnore，@Api，@ApiOperation,@ApiModel,@ApiModelProperty用法</h2><p>如果想忽略controller包下的某些接口，可以添加@ApiIgnore<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7def157a86384669bf5e247f64e83ec4~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>@Api添加controller类相关注释<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80dce5657e0048578207e88aec24d53d~tplv-k3u1fbpfcp-watermark.webp"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f31c9313d89d4bd2bf76531e1a801238~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>@ApiOperation添加接口相关注释</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db7341c928e647ea8b9a737f02054c6a~tplv-k3u1fbpfcp-watermark.webp"><br>效果图</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bd9608ac316426b907bef2239724716~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>@ApiModel与@ApiModelProperty为实体类相关注释。</p>
<p>用法：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/610df3100f8d475689c11d53f463ce0f~tplv-k3u1fbpfcp-watermark.image"></p>
<p>效果图：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/529441ab7574447d8f87a31610abdd0c~tplv-k3u1fbpfcp-watermark.image"></p>
]]></content>
      <categories>
        <category>Swagger2</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>普通Maven项目进行单元测试</title>
    <url>/2020/12/05/%E6%99%AE%E9%80%9AMaven%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>1.利用Junit进行单元测试</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>2、编写待测试类</p>
<pre class=" language-txt"><code class="language-txt">public class Caculate &#123;
    public int plus(int a,int b)&#123;
        return a + b;
    &#125;
    public int minus(int a,int b)&#123;
        return a - b;
    &#125;
&#125;</code></pre>
<p>3、编写单元测试</p>
<pre class=" language-txt"><code class="language-txt">public class CaculateTest &#123;

    @Test
    public void plusTest()&#123;
        Caculate caculate = new Caculate();
        System.out.println(caculate.plus(3,2));
    &#125;
    @Test
    public void minusTest()&#123;
        Caculate caculate = new Caculate();
        System.out.println(caculate.minus(3,2));
    &#125;
&#125;</code></pre>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>用户信息的cookie存放代码实现</title>
    <url>/2020/11/10/%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AFcooike%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[<p>我们在这里不用session，只用cookie来存放相关用户信息。cookie及json相关工具类如下：</p>
<h2 id="1、CookieUtils工具类"><a href="#1、CookieUtils工具类" class="headerlink" title="1、CookieUtils工具类"></a>1、CookieUtils工具类</h2><pre><code>import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;

/**
 * @Title: CookieUtils.java
 * @Description: Cookie 工具类
 * Copyright: Copyright (c)
 */
public final class CookieUtils &#123;

    final static Logger logger = LoggerFactory.getLogger(CookieUtils.class);

    /**
     * 
     * @Description: 得到Cookie的值, 不编码
     * @param request
     * @param cookieName
     * @return
     */
    public static String getCookieValue(HttpServletRequest request, String cookieName) &#123;
        return getCookieValue(request, cookieName, false);
    &#125;

    /**
     * 
     * @Description: 得到Cookie的值
     * @param request
     * @param cookieName
     * @param isDecoder
     * @return
     */
    public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) &#123;
        Cookie[] cookieList = request.getCookies();
        if (cookieList == null || cookieName == null) &#123;
            return null;
        &#125;
        String retValue = null;
        try &#123;
            for (int i = 0; i &lt; cookieList.length; i++) &#123;
                if (cookieList[i].getName().equals(cookieName)) &#123;
                    if (isDecoder) &#123;
                        retValue = URLDecoder.decode(cookieList[i].getValue(), &quot;UTF-8&quot;);
                    &#125; else &#123;
                        retValue = cookieList[i].getValue();
                    &#125;
                    break;
                &#125;
            &#125;
        &#125; catch (UnsupportedEncodingException e) &#123;
            e.printStackTrace();
        &#125;
        return retValue;
    &#125;

    /**
     * 
     * @Description: 得到Cookie的值
     * @param request
     * @param cookieName
     * @param encodeString
     * @return
     */
    public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) &#123;
        Cookie[] cookieList = request.getCookies();
        if (cookieList == null || cookieName == null) &#123;
            return null;
        &#125;
        String retValue = null;
        try &#123;
            for (int i = 0; i &lt; cookieList.length; i++) &#123;
                if (cookieList[i].getName().equals(cookieName)) &#123;
                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);
                    break;
                &#125;
            &#125;
        &#125; catch (UnsupportedEncodingException e) &#123;
             e.printStackTrace();
        &#125;
        return retValue;
    &#125;

    /**
     * 
     * @Description: 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue) &#123;
        setCookie(request, response, cookieName, cookieValue, -1);
    &#125;

    /**
     * 
     * @Description: 设置Cookie的值 在指定时间内生效,但不编码
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     * @param cookieMaxage
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxage) &#123;
        setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);
    &#125;

    /**
     * 
     * @Description: 设置Cookie的值 不设置生效时间,但编码
     * 在服务器被创建，返回给客户端，并且保存客户端
     * 如果设置了SETMAXAGE(int seconds)，会把cookie保存在客户端的硬盘中
     * 如果没有设置，会默认把cookie保存在浏览器的内存中
     * 一旦设置setPath()：只能通过设置的路径才能获取到当前的cookie信息
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     * @param isEncode
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, boolean isEncode) &#123;
        setCookie(request, response, cookieName, cookieValue, -1, isEncode);
    &#125;

   /**
    * 
    * @Description: 设置Cookie的值 在指定时间内生效, 编码参数
    * @param request
    * @param response
    * @param cookieName
    * @param cookieValue
    * @param cookieMaxage
    * @param isEncode
    */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxage, boolean isEncode) &#123;
        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);
    &#125;

    /**
     * 
     * @Description: 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     * @param cookieMaxage
     * @param encodeString
     */
    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,
                                 String cookieValue, int cookieMaxage, String encodeString) &#123;
        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);
    &#125;

    /**
     * 
     * @Description: 删除Cookie带cookie域名
     * @param request
     * @param response
     * @param cookieName
     */
    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,
                                    String cookieName) &#123;
        doSetCookie(request, response, cookieName, null, -1, false);
//        doSetCookie(request, response, cookieName, &quot;&quot;, -1, false);
    &#125;


    /**
     * 
     * @Description: 设置Cookie的值，并使其在指定时间内生效
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     * @param cookieMaxage    cookie生效的最大秒数
     * @param isEncode
     */
    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,
                                          String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) &#123;
        try &#123;
            if (cookieValue == null) &#123;
                cookieValue = &quot;&quot;;
            &#125; else if (isEncode) &#123;
                cookieValue = URLEncoder.encode(cookieValue, &quot;utf-8&quot;);
            &#125;
            Cookie cookie = new Cookie(cookieName, cookieValue);
            if (cookieMaxage &gt; 0)
                cookie.setMaxAge(cookieMaxage);
            if (null != request) &#123;// 设置域名的cookie
                String domainName = getDomainName(request);
                logger.info(&quot;========== domainName: &#123;&#125; ==========&quot;, domainName);
                if (!&quot;localhost&quot;.equals(domainName)) &#123;
                    cookie.setDomain(domainName);
                &#125;
            &#125;
            cookie.setPath(&quot;/&quot;);
            response.addCookie(cookie);
        &#125; catch (Exception e) &#123;
             e.printStackTrace();
        &#125;
    &#125;

    /**
     * 
     * @Description: 设置Cookie的值，并使其在指定时间内生效
     * @param request
     * @param response
     * @param cookieName
     * @param cookieValue
     * @param cookieMaxage    cookie生效的最大秒数
     * @param encodeString
     */
    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,
                                          String cookieName, String cookieValue, int cookieMaxage, String encodeString) &#123;
        try &#123;
            if (cookieValue == null) &#123;
                cookieValue = &quot;&quot;;
            &#125; else &#123;
                cookieValue = URLEncoder.encode(cookieValue, encodeString);
            &#125;
            Cookie cookie = new Cookie(cookieName, cookieValue);
            if (cookieMaxage &gt; 0)
                cookie.setMaxAge(cookieMaxage);
            if (null != request) &#123;// 设置域名的cookie
                String domainName = getDomainName(request);
                logger.info(&quot;========== domainName: &#123;&#125; ==========&quot;, domainName);
                if (!&quot;localhost&quot;.equals(domainName)) &#123;
                    cookie.setDomain(domainName);
                &#125;
            &#125;
            cookie.setPath(&quot;/&quot;);
            response.addCookie(cookie);
        &#125; catch (Exception e) &#123;
             e.printStackTrace();
        &#125;
    &#125;

    /**
     * 
     * @Description: 得到cookie的域名
     * @return
     */
    private static final String getDomainName(HttpServletRequest request) &#123;
        String domainName = null;

        String serverName = request.getRequestURL().toString();
        if (serverName == null || serverName.equals(&quot;&quot;)) &#123;
            domainName = &quot;&quot;;
        &#125; else &#123;
            serverName = serverName.toLowerCase();
            serverName = serverName.substring(7);
            final int end = serverName.indexOf(&quot;/&quot;);
            serverName = serverName.substring(0, end);
            if (serverName.indexOf(&quot;:&quot;) &gt; 0) &#123;
                String[] ary = serverName.split(&quot;\\:&quot;);
                serverName = ary[0];
            &#125;

            final String[] domains = serverName.split(&quot;\\.&quot;);
            int len = domains.length;
            if (len &gt; 3 &amp;&amp; !isIp(serverName)) &#123;
                // www.xxx.com.cn
                domainName = &quot;.&quot; + domains[len - 3] + &quot;.&quot; + domains[len - 2] + &quot;.&quot; + domains[len - 1];
            &#125; else if (len &lt;= 3 &amp;&amp; len &gt; 1) &#123;
                // xxx.com or xxx.cn
                domainName = &quot;.&quot; + domains[len - 2] + &quot;.&quot; + domains[len - 1];
            &#125; else &#123;
                domainName = serverName;
            &#125;
        &#125;
        return domainName;
    &#125;

    public static String trimSpaces(String IP)&#123;//去掉IP字符串前后所有的空格  
        while(IP.startsWith(&quot; &quot;))&#123;  
               IP= IP.substring(1,IP.length()).trim();  
            &#125;  
        while(IP.endsWith(&quot; &quot;))&#123;  
               IP= IP.substring(0,IP.length()-1).trim();  
            &#125;  
        return IP;  
    &#125;  

    public static boolean isIp(String IP)&#123;//判断是否是一个IP  
        boolean b = false;  
        IP = trimSpaces(IP);  
        if(IP.matches(&quot;\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;&quot;))&#123;  
            String s[] = IP.split(&quot;\\.&quot;);  
            if(Integer.parseInt(s[0])&lt;255)  
                if(Integer.parseInt(s[1])&lt;255)  
                    if(Integer.parseInt(s[2])&lt;255)  
                        if(Integer.parseInt(s[3])&lt;255)  
                            b = true;  
        &#125;  
        return b;  
    &#125;  

&#125;
</code></pre>
<h2 id="2、JsonUtils工具类"><a href="#2、JsonUtils工具类" class="headerlink" title="2、JsonUtils工具类"></a>2、JsonUtils工具类</h2><pre><code>import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;

/**
 * 
 * @Title: JsonUtils.java
 * @Description: json转换类
 * Copyright: Copyright (c)
 */
public class JsonUtils &#123;

    // 定义jackson对象
    private static final ObjectMapper MAPPER = new ObjectMapper();

    /**
     * 将对象转换成json字符串。
     * @param data
     * @return
     */
    public static String objectToJson(Object data) &#123;
        try &#123;
            String string = MAPPER.writeValueAsString(data);
            return string;
        &#125; catch (JsonProcessingException e) &#123;
            e.printStackTrace();
        &#125;
        return null;
    &#125;

    /**
     * 将json结果集转化为对象
     * 
     * @param jsonData json数据
     * @param beanType 对象中的object类型
     * @return
     */
    public static &lt;T&gt; T jsonToPojo(String jsonData, Class&lt;T&gt; beanType) &#123;
        try &#123;
            T t = MAPPER.readValue(jsonData, beanType);
            return t;
        &#125; catch (Exception e) &#123;
            e.printStackTrace();
        &#125;
        return null;
    &#125;

    /**
     * 将json数据转换成pojo对象list
     * @param jsonData
     * @param beanType
     * @return
     */
    public static &lt;T&gt;List&lt;T&gt; jsonToList(String jsonData, Class&lt;T&gt; beanType) &#123;
        JavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);
        try &#123;
            List&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);
            return list;
        &#125; catch (Exception e) &#123;
            e.printStackTrace();
        &#125;

        return null;
    &#125;

&#125;</code></pre>
<h2 id="3、用户登录，注册及注销相关代码"><a href="#3、用户登录，注册及注销相关代码" class="headerlink" title="3、用户登录，注册及注销相关代码"></a>3、用户登录，注册及注销相关代码</h2><pre><code>    @ApiOperation(value = &quot;用户注册&quot;, notes = &quot;用户注册&quot;, httpMethod = &quot;POST&quot;)
    @PostMapping(&quot;/regist&quot;)
    public IMOOCJSONResult regist(@RequestBody UserBo userBo,HttpServletRequest request,
                                  HttpServletResponse response) &#123;
        String userName = userBo.getUsername();
        String password = userBo.getPassword();
        String comfirmPwd = userBo.getConfirmPassword();
        if (StringUtils.isBlank(userName) || StringUtils.isBlank(password)
                || StringUtils.isBlank(comfirmPwd)) &#123;
            return IMOOCJSONResult.errorMsg(&quot;用户名或密码不能为空&quot;);
        &#125;
        boolean isExist = userService.queryUserNameIsExist(userName);
        if (isExist) &#123;
            return IMOOCJSONResult.errorMsg(&quot;用户名已经存在&quot;);
        &#125;
        if (password.length() &lt; 6) &#123;
            return IMOOCJSONResult.errorMsg(&quot;密码长度不能少于6&quot;);
        &#125;
        if (!password.equals(comfirmPwd)) &#123;
            return IMOOCJSONResult.errorMsg(&quot;两次密码不一致&quot;);
        &#125;
        Users users = userService.createUser(userBo);
        users.setPassword(null);
        users.setMobile(null);
        users.setEmail(null);
        users.setCreatedTime(null);
        users.setBirthday(null);
        users.setUpdatedTime(null);
        CookieUtils.setCookie(request, response, &quot;user&quot;,
                JsonUtils.objectToJson(users), true);
        return IMOOCJSONResult.ok();
    &#125;

    // 用户登录
    @ApiOperation(value = &quot;用户登录&quot;, notes = &quot;用户登录&quot;, httpMethod = &quot;POST&quot;)
    @PostMapping(&quot;/login&quot;)
    public IMOOCJSONResult login(@RequestBody UserBo userBo, HttpServletRequest request,
                                 HttpServletResponse response) throws Exception &#123;
        String userName = userBo.getUsername();
        String password = userBo.getPassword();
        if (StringUtils.isBlank(userName) || StringUtils.isBlank(password)) &#123;
            return IMOOCJSONResult.errorMsg(&quot;用户名或密码不能为空&quot;);
        &#125;
        Users users = userService.queryUserForLogin(userName, MD5Utils.getMD5Str(password));
        if (users == null) &#123;
            return IMOOCJSONResult.errorMsg(&quot;用户名或密码错误&quot;);
        &#125;
        users.setPassword(null);
        users.setMobile(null);
        users.setEmail(null);
        users.setCreatedTime(null);
        users.setBirthday(null);
        users.setUpdatedTime(null);
        CookieUtils.setCookie(request, response, &quot;user&quot;,
                JsonUtils.objectToJson(users), true);
        return IMOOCJSONResult.ok(users);
    &#125;

    // 用户退出登录
    @ApiOperation(value = &quot;用户退出登录&quot;, notes = &quot;用户退出登录&quot;, httpMethod = &quot;POST&quot;)
    @PostMapping(&quot;/logout&quot;)
    public IMOOCJSONResult logout(@RequestParam String userId, HttpServletRequest request,
                                  HttpServletResponse response) &#123;
        CookieUtils.deleteCookie(request, response, &quot;user&quot;);
        return IMOOCJSONResult.ok();
    &#125;</code></pre>
]]></content>
      <categories>
        <category>cookie</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义响应体类</title>
    <url>/2020/11/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E4%BD%93%E7%B1%BB/</url>
    <content><![CDATA[<p>类结构如下，参考慕课网。</p>
<pre><code>import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 
 * @Title: IMOOCJSONResult.java
 * @Package com.imooc.utils
 * @Description: 自定义响应数据结构
 *                 本类可提供给 H5/ios/安卓/公众号/小程序 使用
 *                 前端接受此类数据（json object)后，可自行根据业务去实现相关功能
 * 
 *                 200：表示成功
 *                 500：表示错误，错误信息在msg字段中
 *                 501：bean验证错误，不管多少个错误都以map形式返回
 *                 502：拦截器拦截到用户token出错
 *                 555：异常抛出信息
 *                 556: 用户qq校验异常
 * @Copyright: Copyright (c) 2020
 * @Company: www.imooc.com
 * @author 慕课网 - 风间影月
 * @version V1.0
 */
public class IMOOCJSONResult &#123;

    // 定义jackson对象
    private static final ObjectMapper MAPPER = new ObjectMapper();

    // 响应业务状态
    private Integer status;

    // 响应消息
    private String msg;

    // 响应中的数据
    private Object data;

    @JsonIgnore
    private String ok;    // 不使用

    public static IMOOCJSONResult build(Integer status, String msg, Object data) &#123;
        return new IMOOCJSONResult(status, msg, data);
    &#125;

    public static IMOOCJSONResult build(Integer status, String msg, Object data, String ok) &#123;
        return new IMOOCJSONResult(status, msg, data, ok);
    &#125;

    public static IMOOCJSONResult ok(Object data) &#123;
        return new IMOOCJSONResult(data);
    &#125;

    public static IMOOCJSONResult ok() &#123;
        return new IMOOCJSONResult(null);
    &#125;

    public static IMOOCJSONResult errorMsg(String msg) &#123;
        return new IMOOCJSONResult(500, msg, null);
    &#125;

    public static IMOOCJSONResult errorMap(Object data) &#123;
        return new IMOOCJSONResult(501, &quot;error&quot;, data);
    &#125;

    public static IMOOCJSONResult errorTokenMsg(String msg) &#123;
        return new IMOOCJSONResult(502, msg, null);
    &#125;

    public static IMOOCJSONResult errorException(String msg) &#123;
        return new IMOOCJSONResult(555, msg, null);
    &#125;

    public static IMOOCJSONResult errorUserQQ(String msg) &#123;
        return new IMOOCJSONResult(556, msg, null);
    &#125;

    public IMOOCJSONResult() &#123;

    &#125;

    public IMOOCJSONResult(Integer status, String msg, Object data) &#123;
        this.status = status;
        this.msg = msg;
        this.data = data;
    &#125;

    public IMOOCJSONResult(Integer status, String msg, Object data, String ok) &#123;
        this.status = status;
        this.msg = msg;
        this.data = data;
        this.ok = ok;
    &#125;

    public IMOOCJSONResult(Object data) &#123;
        this.status = 200;
        this.msg = &quot;OK&quot;;
        this.data = data;
    &#125;

    public Boolean isOK() &#123;
        return this.status == 200;
    &#125;

    public Integer getStatus() &#123;
        return status;
    &#125;

    public void setStatus(Integer status) &#123;
        this.status = status;
    &#125;

    public String getMsg() &#123;
        return msg;
    &#125;

    public void setMsg(String msg) &#123;
        this.msg = msg;
    &#125;

    public Object getData() &#123;
        return data;
    &#125;

    public void setData(Object data) &#123;
        this.data = data;
    &#125;

    public String getOk() &#123;
        return ok;
    &#125;

    public void setOk(String ok) &#123;
        this.ok = ok;
    &#125;

&#125;
</code></pre>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>跳台阶问题的几种变形</title>
    <url>/2020/11/10/%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、一次可以跳一个台阶或者两个台阶"><a href="#1、一次可以跳一个台阶或者两个台阶" class="headerlink" title="1、一次可以跳一个台阶或者两个台阶"></a>1、一次可以跳一个台阶或者两个台阶</h2><pre><code>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n级的台阶总共有多少种跳法。
示例 1：
输入：n = 2
输出：2

示例 2：
输入：n = 7
输出：21

提示：
0 &lt;= n &lt;= 100</code></pre>
<pre><code>思路：
设跳上 n 级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况：跳上 1 级或 2 级台阶。

1、当为 1 级台阶： 剩 n-1个台阶，此情况共有 f(n?1) 种跳法；
2、当为 2 级台阶： 剩 n-2个台阶，此情况共有 f(n?2) 种跳法。
f(n) 为以上两种情况之和，即 f(n)=f(n-1)+f(n-2)</code></pre>
<pre><code>class Solution &#123;
    public int numWays(int n) &#123;
        if (n == 0)
            return 1;
        if (n &lt;= 2)
            return n;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i &lt;= n; i++) &#123;
            dp[i] = (dp[i - 1] + dp[i - 2]);
        &#125;
        return dp[n];
    &#125;
&#125;</code></pre>
<h2 id="2、一次可以跳一个台阶、两个台阶或者三个台阶"><a href="#2、一次可以跳一个台阶、两个台阶或者三个台阶" class="headerlink" title="2、一次可以跳一个台阶、两个台阶或者三个台阶"></a>2、一次可以跳一个台阶、两个台阶或者三个台阶</h2><pre class=" language-txt"><code class="language-txt">一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶，还可以跳上3级台阶。
求该青蛙跳上一个 n级的台阶总共有多少种跳法。</code></pre>
<pre><code>思路：
最后一步可能是从第n-1阶往上走1阶、从n-2阶往上走2阶，或从第n-3阶往上走3阶。
因此，抵达最后一阶的走法，其实就是抵达这最后三阶的方式的总和。</code></pre>
<pre><code>class Solution &#123;
    public static int numWays(int n) &#123;
        if (n == 0)
            return 1;
        if (n == 2)
            return 2;
        if (n == 3)
            return 4;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 4;
        for (int i = 4; i &lt;= n; i++) &#123;
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
        &#125;
        return dp[n];
    &#125;

&#125;</code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次使用MapReduce做WordCount遇到的坑</title>
    <url>/2020/12/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8MapReduce%E5%81%9AWordCount%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>首先介绍下开发环境，Hadoop部署在阿里云上，本地用IDEA开发，目的是使用MR做一个简单的WC。</p>
<h2 id="1、Mapper、Reducer及Driver相关代码"><a href="#1、Mapper、Reducer及Driver相关代码" class="headerlink" title="1、Mapper、Reducer及Driver相关代码"></a>1、Mapper、Reducer及Driver相关代码</h2><h3 id="1-1-Mapper业务代码"><a href="#1-1-Mapper业务代码" class="headerlink" title="1.1 Mapper业务代码"></a>1.1 Mapper业务代码</h3><pre class=" language-txt"><code class="language-txt">import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;

/**
 * keyin Map任务读取数据的key类型，offset，是每行数据起始位置的偏移量，Long
 * Valuein Map任务读数据的value类型，其实就是一行行的字符串，String类型
 * hello world welcome
 * hello welcome
 * keyout map方法自定义实现输出的key类型，String
 * valueout map方法自定义实现的value类型，Integer类型
 */
public class WordCountMapper extends Mapper<LongWritable,Text,Text,IntWritable>&#123;

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;
        // 把value对应的行数据按照指定的分隔符拆开
        String[] words = value.toString().split("\t");
        for(String word : words)&#123;
            context.write(new Text(word),new IntWritable(1));
        &#125;
    &#125;
&#125;</code></pre>
<h3 id="1-2-Reducer业务代码"><a href="#1-2-Reducer业务代码" class="headerlink" title="1.2 Reducer业务代码"></a>1.2 Reducer业务代码</h3><pre class=" language-txt"><code class="language-txt">import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

import java.io.IOException;
import java.util.Iterator;


public class WordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable> &#123;
    /**
     * (hello,1) (world,1)
     * (hello,1) (world,1)
     * (welcome,1)
     * <p>
     * map的输出到reduce端，是按照相同的key分发到一个reduce上去执行的
     * <p>
     * reduce1: (hello,1) (hello,1) (hello,1) --> (hello,<1,1,1>)
     * reduce2: (world,1) (world,1) (world,1) --> (world, <1,1,1>)
     * reduce3: (welcome,1) --> (welcome,<1>)
     *
     * @param key
     * @param values
     * @param context
     * @throws IOException
     * @throws InterruptedException
     */
    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException &#123;
        int count = 0;
        Iterator<IntWritable> iterator = values.iterator();
        while (iterator.hasNext()) &#123;
            IntWritable value = iterator.next();
            count += value.get();
        &#125;
        context.write(key,new IntWritable(count));
    &#125;
&#125;</code></pre>
<h3 id="1-3-Driver业务代码"><a href="#1-3-Driver业务代码" class="headerlink" title="1.3 Driver业务代码"></a>1.3 Driver业务代码</h3><pre class=" language-txt"><code class="language-txt">import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import java.io.IOException;

/**
 * 使用MR统计HDFS上的文件对应的词频
 */
public class WordCountApp &#123;
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException &#123;
        // System.setProperty("HADOOP_USER_NAME","root");
        Configuration configuration = new Configuration();
        configuration.set("fs.defaultFS", "hdfs://121.**.***.81:8020/");
        // configuration.set("dfs.client.use.datanode.hostname", "true");

        // 创建一个job
        Job job = Job.getInstance(configuration);
        // 设置job对应的参数：主类
        job.setJarByClass(WordCountApp.class);
        // 设置job对应的参数：自定义Mapper和Reducer类
        job.setMapperClass(WordCountMapper.class);
        job.setReducerClass(WordCountReducer.class);
        // 设置Job对应的参数：Mapper输出key和value的类型
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(IntWritable.class);
        // 设置Job对应的参数：Reducer输出key和value的类型
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        // 设置Job对应的参数：Mapper输出key和value的类型，作业输入和输出的路径
        FileInputFormat.setInputPaths(job, new Path("/wordcount/input"));
        FileOutputFormat.setOutputPath(job, new Path("/wordcount/output"));
        // 提交job
        boolean res = job.waitForCompletion(true);
        System.exit(res ? 0 : -1);
    &#125;
&#125;</code></pre>
<h2 id="2、相关错误汇总及解决办法"><a href="#2、相关错误汇总及解决办法" class="headerlink" title="2、相关错误汇总及解决办法"></a>2、相关错误汇总及解决办法</h2><h3 id="2-1-第一个错误"><a href="#2-1-第一个错误" class="headerlink" title="2.1 第一个错误"></a>2.1 第一个错误</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8da05832944c470e9e2264a4f000a793~tplv-k3u1fbpfcp-watermark.image"><br>解决办法下载<br>解决办法：<br>(1) 下载winutils，注意需要与hadoop的版本相对应。<br>hadoop2.2版本可以在这里下载 <a href="https://github.com/srccodes/hadoop-common-2.2.0-bin">https://github.com/srccodes/hadoop-common-2.2.0-bin</a><br>hadoop2.6版本可以在这里下载 <a href="https://github.com/amihalik/hadoop-common-2.6.0-bin">https://github.com/amihalik/hadoop-common-2.6.0-bin</a><br>由于配置的测试集群是hadoop2.6.0，所以我在这里下载的是2.6.0版本的。下载后，将其解压。  </p>
<p>(2) 配置环境变量<br>增加系统变量HADOOP_HOME，值是下载的zip包解压的目录，我这里解压后将其重命名为hadoop-common-2.6.0<br>在系统变量path里增加%HADOOP_HOME%\bin<br>重启电脑，使环境变量配置生效，上述问题即可解决。  　　</p>
<h3 id="2-2-第二个错误"><a href="#2-2-第二个错误" class="headerlink" title="2.2 第二个错误"></a>2.2 第二个错误</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dacec1c3305b4c618070ac8113c4ccfe~tplv-k3u1fbpfcp-watermark.image"></p>
<p>解决办法，在上一个基础上删除所有文件夹内部的hadoop.dll文件</p>
<h3 id="2-3-第三个错误"><a href="#2-3-第三个错误" class="headerlink" title="2.3 第三个错误"></a>2.3 第三个错误</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eff79bbe5f5c4092ae5170c5430b7de3~tplv-k3u1fbpfcp-watermark.image"><br>解决办法，自定义NativeIO类，在access方法处之间返回true<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90508c22389b41a4b43f918e56afe85a~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-4-第四个错误"><a href="#2-4-第四个错误" class="headerlink" title="2.4 第四个错误"></a>2.4 第四个错误</h3><p>提示Windows用户权限不足。<br>加一行代码，用Linux内部操作Hadoop的用户来操作</p>
<pre><code>System.setProperty(&quot;HADOOP_USER_NAME&quot;,&quot;root&quot;);</code></pre>
<h3 id="2-4-第五个错误"><a href="#2-4-第五个错误" class="headerlink" title="2.4 第五个错误"></a>2.4 第五个错误</h3><p>连接超时<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de932018249a4583bef4f6a70a7a4159~tplv-k3u1fbpfcp-watermark.image"><br>解决方法：</p>
<pre><code> configuration.set(&quot;dfs.client.use.datanode.hostname&quot;, &quot;true&quot;);</code></pre>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器相关软件安装</title>
    <url>/2020/12/05/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、JDK的安装"><a href="#一、JDK的安装" class="headerlink" title="一、JDK的安装"></a>一、JDK的安装</h2><p>服务器安装JDK之前，先确保有没有默认安装的JDK,执行如下命令检查:</p>
<pre class=" language-shell"><code class="language-shell">java -version</code></pre>
<p>如果是自己在虚拟机上安装的centos7.x或者centos6.x，则会默认帮你安装好OpenJDK，如下截图<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05141ce65ae0494eb15282aa05507f2e~tplv-k3u1fbpfcp-watermark.image"></p>
<p>需要卸载，卸载步骤如下：</p>
<h3 id="1-检查系统安装的OpenJDK"><a href="#1-检查系统安装的OpenJDK" class="headerlink" title="1. 检查系统安装的OpenJDK"></a>1. 检查系统安装的OpenJDK</h3><pre class=" language-shell"><code class="language-shell">rpm -qa|grep openjdk -i</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba88b7993cab4b08979048b82e224e42~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-删除以上四项openjdk-的安装包并且检查后显示删除完毕"><a href="#2-删除以上四项openjdk-的安装包并且检查后显示删除完毕" class="headerlink" title="2. 删除以上四项openjdk 的安装包并且检查后显示删除完毕"></a>2. 删除以上四项openjdk 的安装包并且检查后显示删除完毕</h3><pre class=" language-shell"><code class="language-shell">rpm -e --nodeps 需要删除的软件</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7560f08e6b2b4787b8b2f2df1ce1d07a~tplv-k3u1fbpfcp-watermark.image"><br>如果是在阿里云或者腾讯云上的centos系统，一般不会自带jdk，但是以上步骤还是建议检查一下，如若发现自带jdk，建议删除后重新安装。</p>
<h3 id="3-具体安装步骤如下"><a href="#3-具体安装步骤如下" class="headerlink" title="3. 具体安装步骤如下"></a>3. 具体安装步骤如下</h3><h4 id="3-1-新建jdk安装目录"><a href="#3-1-新建jdk安装目录" class="headerlink" title="3.1 新建jdk安装目录"></a>3.1 新建jdk安装目录</h4><pre class=" language-shell"><code class="language-shell">mkdir /usr/java
mkdir /home/software</code></pre>
<h4 id="3-2-上传及解压缩安装文件"><a href="#3-2-上传及解压缩安装文件" class="headerlink" title="3.2 上传及解压缩安装文件"></a>3.2 上传及解压缩安装文件</h4><p>将本地安装文件<code>jdk-8u261-linux-i586.tar.gz </code>上传到/home/software下<br>执行解压命令<code> tar -zxvf jdk-8u261-linux-i586.tar.gz</code><br>解压后的样子如下：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a7315f863e443dd96c0504cc539b2af~tplv-k3u1fbpfcp-watermark.image"></p>
<p>将解压后的文件夹移动到<code> /usr/java</code> 目录下</p>
<pre class=" language-shell"><code class="language-shell">mv jdk1.8.0_191/ /usr/java/</code></pre>
<h4 id="3-3-配置环境变量"><a href="#3-3-配置环境变量" class="headerlink" title="3.3 配置环境变量"></a>3.3 配置环境变量</h4><pre><code>vim /etc/profile</code></pre>
<pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/java/jdk1.8.0_191
export CLASSPATH=.:%JAVA_HOME%/lib/dt.java:%JAVA_HOME%/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin</code></pre>
<pre><code>source /etc/profile</code></pre>
<pre><code>java -version</code></pre>
<p>总结图片如下：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/449b47bebde745d9b812058565e72f9d~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="二、Tomcat的安装"><a href="#二、Tomcat的安装" class="headerlink" title="二、Tomcat的安装"></a>二、Tomcat的安装</h2><p>上传文件到指定文件夹，这里我们上传到 <code>/home/software</code>下面<br>然后解压文件<code>tar -zxvf apache-tomcat-9.0.24.tar.gz </code></p>
<p>将解压后的文件夹移动到指定目录下，这里我们将其移动到<code> /usr/local</code>目录下。</p>
<p>进入bin目录下，运行<code>./startup.sh</code> 启动tomcat</p>
<p>如果需要部署多台tomcat，就需要修改默认的端口号，具体需要修改三个相关的端口号<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ce218033aea4dbb915fb5e8187cec7f~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5451485d5d44cc7aa08e32346b8ce53~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b054427e89884f02b4765e04161024ba~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="三、MariDB的安装"><a href="#三、MariDB的安装" class="headerlink" title="三、MariDB的安装"></a>三、MariDB的安装</h2><p>参考链接：<br><a href="https://blog.csdn.net/lx678111/article/details/104660852/">https://blog.csdn.net/lx678111/article/details/104660852/</a><br>这里提供离线安装的手段<br>网址：<br><a href="https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/">https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/</a><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f106f351e9a342ba84069b4dc59935eb~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="四、阿里云系统快照恢复"><a href="#四、阿里云系统快照恢复" class="headerlink" title="四、阿里云系统快照恢复"></a>四、阿里云系统快照恢复</h2><p>恢复服务器，需要使用命令 sudo systemctl start mariadb.service重启数据库服务。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中的事务传播机制</title>
    <url>/2020/11/20/Spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="1、以下是事物的传播机制："><a href="#1、以下是事物的传播机制：" class="headerlink" title="1、以下是事物的传播机制："></a>1、以下是事物的传播机制：</h2><pre><code>@Transactional(propagation=Propagation.REQUIRED)
如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)
换句话说，使用当前的事务，如果当前没有事务，则自己新建一个事务，
子方法是必须运行在一个事务中的，如果当前存在事务，则加入这个事务，成为一个整体
@Transactional(propagation=Propagation.SUPPORTS)
如果当前有事务，则使用事务，如果当前没有事务，则不使用事务
@Transactional(propagation=Propagation.MANDATORY)
必须在一个已有的事务中执行,否则抛出异常
@Transactional(propagation=Propagation.REQUIRES_NEW)
不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务
@Transactional(propagation=Propagation.NOT_SUPPORTED)
容器不为这个方法开启事务
@Transactional(propagation=Propagation.NEVER)
必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</code></pre>
<h2 id="2、代码验证说明："><a href="#2、代码验证说明：" class="headerlink" title="2、代码验证说明："></a>2、代码验证说明：</h2><h3 id="2-1-无任何事务"><a href="#2-1-无任何事务" class="headerlink" title="2.1 无任何事务"></a>2.1 无任何事务</h3><pre><code>// service层
public interface StuService &#123;
    public void saveParent();
    public void saveChildren();
&#125;
// service实现类
@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>//测试service接口及实现类

public interface TransTest &#123;
    public void testPropagationTrans();
&#125;


@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<pre><code>// 单元测试

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)  //配置启动类
public class Test &#123;
    @Autowired
    private TransTest transTest;
    @org.junit.Test
    public void myTest()&#123;
        transTest.testPropagationTrans();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfc2a4bf478b4cc9994717b5f651a0ca~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-2-测试Propagation-REQUIRED"><a href="#2-2-测试Propagation-REQUIRED" class="headerlink" title="2.2 测试Propagation.REQUIRED"></a>2.2 测试Propagation.REQUIRED</h3><h4 id="2-2-1-父方法有Propagation-REQUIRED"><a href="#2-2-1-父方法有Propagation-REQUIRED" class="headerlink" title="2.2.1 父方法有Propagation.REQUIRED"></a>2.2.1 父方法有Propagation.REQUIRED</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>数据库未新增任何数据。</p>
<h4 id="2-2-2-子方法有Propagation-REQUIRED"><a href="#2-2-2-子方法有Propagation-REQUIRED" class="headerlink" title="2.2.2 子方法有Propagation.REQUIRED"></a>2.2.2 子方法有Propagation.REQUIRED</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46285d8259ba45c792eeaab1f567875a~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-3-Propagation-SUPPORTS"><a href="#2-3-Propagation-SUPPORTS" class="headerlink" title="2.3 Propagation.SUPPORTS"></a>2.3 Propagation.SUPPORTS</h3><h4 id="2-3-1子方法SUPPORTS-父方法无事务"><a href="#2-3-1子方法SUPPORTS-父方法无事务" class="headerlink" title="2.3.1子方法SUPPORTS,父方法无事务"></a>2.3.1子方法SUPPORTS,父方法无事务</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.SUPPORTS)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef1462ba34a844d39e29dd518262f6d5~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-3-2-子方法SUPPORTS-父方法REQUIRD"><a href="#2-3-2-子方法SUPPORTS-父方法REQUIRD" class="headerlink" title="2.3.2 子方法SUPPORTS,父方法REQUIRD"></a>2.3.2 子方法SUPPORTS,父方法REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.SUPPORTS)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>数据库无任何新增。</p>
<h3 id="2-4-Propagation-MANDATORY"><a href="#2-4-Propagation-MANDATORY" class="headerlink" title="2.4 Propagation.MANDATORY"></a>2.4 Propagation.MANDATORY</h3><h4 id="2-4-1-子方法有MANDATORY，父方法无事务"><a href="#2-4-1-子方法有MANDATORY，父方法无事务" class="headerlink" title="2.4.1 子方法有MANDATORY，父方法无事务"></a>2.4.1 子方法有MANDATORY，父方法无事务</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.MANDATORY)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果抛出异常：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/373e609151514365825e49daca15c250~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-4-2-子方法有MANDATORY，父方法有有REQUIRD"><a href="#2-4-2-子方法有MANDATORY，父方法有有REQUIRD" class="headerlink" title="2.4.2 子方法有MANDATORY，父方法有有REQUIRD"></a>2.4.2 子方法有MANDATORY，父方法有有REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.MANDATORY)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：数据库无任何变化。</p>
<h3 id="2-5-Propagation-REQUIRES-NEW"><a href="#2-5-Propagation-REQUIRES-NEW" class="headerlink" title="2.5 Propagation.REQUIRES_NEW"></a>2.5 Propagation.REQUIRES_NEW</h3><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：因为其新启动了一个事务，因此，子方法失败，父方法是另一个事务，接收到子方法的失败后，自身也失败，数据库无任何新增数据。</p>
<h3 id="2-6-Propagation-NOT-SUPPORTED"><a href="#2-6-Propagation-NOT-SUPPORTED" class="headerlink" title="2.6 Propagation.NOT_SUPPORTED"></a>2.6 Propagation.NOT_SUPPORTED</h3><h4 id="2-6-1-子Propagation-NOT-SUPPORTED，父无"><a href="#2-6-1-子Propagation-NOT-SUPPORTED，父无" class="headerlink" title="2.6.1 子Propagation.NOT_SUPPORTED，父无"></a>2.6.1 子Propagation.NOT_SUPPORTED，父无</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NOT_SUPPORTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3274c07c46d4289b9bd8014fe10c4b5~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-6-2-子Propagation-NOT-SUPPORTED，父Propagation-REQUIRD"><a href="#2-6-2-子Propagation-NOT-SUPPORTED，父Propagation-REQUIRD" class="headerlink" title="2.6.2 子Propagation.NOT_SUPPORTED，父Propagation.REQUIRD"></a>2.6.2 子Propagation.NOT_SUPPORTED，父Propagation.REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NOT_SUPPORTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce72695e4235407b80dfeb0bc17da0aa~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-7-Propagation-NEVER"><a href="#2-7-Propagation-NEVER" class="headerlink" title="2.7 Propagation.NEVER"></a>2.7 Propagation.NEVER</h3><h4 id="2-7-1-子Propagation-NEVER，父Propagation-REQUIRD"><a href="#2-7-1-子Propagation-NEVER，父Propagation-REQUIRD" class="headerlink" title="2.7.1 子Propagation.NEVER，父Propagation.REQUIRD"></a>2.7.1 子Propagation.NEVER，父Propagation.REQUIRD</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NEVER)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    @Transactional(propagation = Propagation.REQUIRD)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b3e5b1970ee43019d79d47068b19bd8~tplv-k3u1fbpfcp-watermark.image"></p>
<h4 id="2-7-2-子Propagation-NEVER，父无"><a href="#2-7-2-子Propagation-NEVER，父无" class="headerlink" title="2.7.2 子Propagation.NEVER，父无"></a>2.7.2 子Propagation.NEVER，父无</h4><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NEVER)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b3e5b1970ee43019d79d47068b19bd8~tplv-k3u1fbpfcp-watermark.image"></p>
<h3 id="2-8-Propagation-NESTED"><a href="#2-8-Propagation-NESTED" class="headerlink" title="2.8 Propagation.NESTED"></a>2.8 Propagation.NESTED</h3><pre><code>@Service
public class StuServiceImpl implements StuService &#123;
    @Autowired
    private StuMapper stuMapper;

    @Override
    public void saveParent()&#123;
        Stu stu = new Stu();
        stu.setAge(19);
        stu.setName(&quot;parent&quot;);
        stuMapper.insert(stu);
    &#125;
    @Override
    @Transactional(propagation = Propagation.NESTED)
    public void saveChildren()&#123;
        saveChild1();
        int a = 1/0;
        saveChild2();
    &#125;

    public void saveChild1()&#123;
        Stu stu1 = new Stu();
        stu1.setName(&quot;child-1&quot;);
        stu1.setAge(11);
        stuMapper.insert(stu1);
    &#125;

    public void saveChild2()&#123;
        Stu stu2 = new Stu();
        stu2.setName(&quot;child-2&quot;);
        stu2.setAge(22);
        stuMapper.insert(stu2);
    &#125;

&#125;</code></pre>
<pre><code>@Service
public class TransTestImpl implements TransTest &#123;
    @Autowired
    private StuService stuService;

    @Override
     @Transactional(propagation = Propagation.REQUIRED)
    public void testPropagationTrans() &#123;
        stuService.saveParent();
        stuService.saveChildren();
    &#125;
&#125;</code></pre>
<p>结果：<br>无任何数据。<br>即，如果当前有事务，则开启子事务(嵌套事务)，嵌套事务是独立提交或者回滚；如果当前没有事务，则同REQUIRD。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
